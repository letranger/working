#+title: Programming Language Testing* elisp#+begin_src emacs-lisp(defadvice org-edit-src-code (around set-buffer-file-name activate compile)  (let ((file-name (buffer-file-name))) ;; (1)    ad-do-it                            ;; (2)    (setq buffer-file-name file-name))) ;; (3)#+end_src#+RESULTS:: org-edit-src-code* CPP#+begin_src cpp -r -n :results output :exports both#include <cmath>#include <iostream>using namespace std;int main() {    cout << "TEST";    int a = 999;    for (int i = 0; i < 8; i++) {        cout << i  << endl;        if (condition) {                    }        }}#+end_src#+RESULTS:: TEST0: 1: 2: 3: 4: 5: 6: 7* Python#+begin_src python -r -n :results output :exports bothimport numpy as npimport pandas as pdscores = {'Math': [900, 50, 70, 80],          'English': [60, 30, 90, 50],          'History': [33, 75, np.NaN, np.NaN]}df = pd.DataFrame(scores, index=['Simon', 'Allen', 'Jimmy', 'Vanessa'])print('==1.Math分數>100==')print(df[df['Math'] > 100])print('==2.Siman Math=90==')df.loc[df.index == 'Simon', 'Math'] = 90print(df)print('==3.計算History遺漏值筆數==')print(df.isna().sum())print('==4.取代History遺漏值==')#df = df.fillna({'History':df.History.mean()})#df.fillna({'History':df.History.mean()}, inplace=True)df['History'].fillna(value=df['History'].mean(), inplace=True)print(df)print('==5.平均==')df['平均'] = df.mean(axis=1)print(df)print('==6.名次==')df['名次'] = df['平均'].rank()print(df)print('==7.平均不及格==')print(df[df['平均']<60])print('==8.數學最高分==')print(df['Math'].idxmax())#+end_src#+RESULTS:#+begin_example==1.Math分數>100==       Math  English  HistorySimon   900       60     33.0==2.Siman Math=90==         Math  English  HistorySimon      90       60     33.0Allen      50       30     75.0Jimmy      70       90      NaNVanessa    80       50      NaN==3.計算History遺漏值筆數==Math       0English    0History    2dtype: int64==4.取代History遺漏值==         Math  English  HistorySimon      90       60     33.0Allen      50       30     75.0Jimmy      70       90     54.0Vanessa    80       50     54.0==5.平均==         Math  English  History         平均Simon      90       60     33.0  61.000000Allen      50       30     75.0  51.666667Jimmy      70       90     54.0  71.333333Vanessa    80       50     54.0  61.333333==6.名次==         Math  English  History         平均   名次Simon      90       60     33.0  61.000000  2.0Allen      50       30     75.0  51.666667  1.0Jimmy      70       90     54.0  71.333333  4.0Vanessa    80       50     54.0  61.333333  3.0==7.平均不及格==       Math  English  History         平均   名次Allen    50       30     75.0  51.666667  1.0==8.數學最高分==Simon#+end_example* (700) 0061052 0184488