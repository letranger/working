#+TITLE: 台科大教科書

* 國家教育研究院教科書審查意見表
** 一般基準/組織結構：
*** 部分章節名稱意涵不明，例如：4-2統計學、機器學習、人工智慧與資料探勘。而且其內容也缺乏焦點主題。
*** TODO 修訂: 此節全數刪除
** 一般基準/文本內容
*** 多處內容不完整，無法清楚呈現概念。教科書應能提供完整具脈絡的概念說明。例如：
**** 3-4系統平台介紹元宇宙概念。但元宇宙蓋面甚廣，介紹稍嫌簡略。此外， p.150說明元宇宙的概念，其中並未說明區塊鏈，但p.151卻提到此專有名詞。
**** TODO 修訂：增加元宇宙內容介紹以及區塊鏈概念簡介
**** 部分章節涵蓋許多較為進階的概念，但並未適切說明。例如，p.137介紹OS記憶體管理、VM與page fault等概念，但僅有一頁內容，學生是否能由該頁內容理解frame與page的定義？page fault產生的各種可能？記憶體置換的多種策略？
**** TODO 修訂：增加VM，page, frame的說明
*** 第四章中巨量資料及資料探勘的處理流程及方法相似，建議適當釐清或整併連結。
**** TODO 修訂：簡化資料探勘的流程說明，
** 一般基準/教學活動設計
*** 部分內容偏向細瑣的知識陳述，宜加入思考與問題解決之學習活動，以培養學生運算思維。例如：第三章系統平台的內容。
*** TODO 修訂：加入問題解決學習活動
*** 本書多章練習題皆在檢測學生記憶性知識，無法提供學生思考與問題解決的機會。例如：許多題目為專有名詞解釋或數位工具名稱的單選題。
*** TODO 修訂：加入問題解決式試題
*** 第四章資料表示、處理及分析無實作設計，無法引導學生思考資料處理與分析的目的、策略與方法。
*** TODO 修訂：將原本移至教師手冊的實作範例移至課文中
** 一般基準/圖文表達
*** 本書多處內容文句或邏輯不通順，應詳加校訂並潤飾。
*** 本書常整段文章，只有最後一個句號，其餘都是逗號，影響閱讀。如：p108；p.110；p.189第一段；p.211第一段全段11個逗號，一個句號；p.217第一段；p.220第一段；p.255第六章兩段前言；p.257正確性段落等；宜全書檢視修正。
*** TODO 修訂：重新順稿
*** 本書多處圖片未能有效表達意涵。例如：p.19教室內的學生。
*** 本書多處圖片未於內文有適切的引用或文字對應說明。
** 一般基準/編寫體例
建議本書於書末加入圖表及中英文詞彙關鍵字索引，以利學生學習。
** 各章節問題
*** 第三章 系統平台
**** 部份內容以學生未學過的知識作為例子。如：p.120學生知道何為COBOL或是FORTRAN嗎？
**** TODO 修訂: 加註COBOL/FORTRAN介紹，此例中若以其他學生熟知的語言(C/C++)替代並不合理
**** 部份內容以學生未知之專有名詞進行說明。如：p.113 Cache L1~L3、Northbridge、p.129 BIOS與CMOS。
**** TODO 修訂：簡化p113圖片，將BIOS與CMOS加入名詞解釋
**** 部分內容涵蓋進階的概念，但並未適切說明，如p.137 OS記憶體管理、VM與page fault等。
**** TODO 修訂：增加VM，page, frame的說明
**** 內容多為知識陳述，無法引導學生思考系統平台的演進脈絡及運作原理。宜提供學生思考、應用、動手實作之機會，以培養學生運算思維與問題解決。例如：引導學生觀察自己電腦正在執行的行程與資源的使用狀況。
**** TODO 修訂：加入問題解決式試題及範例(觀察記憶體與CPU使用情形，解決問題)

*** 第四章 資料表示、處理及分析
**** 部分內容有誤且不一致，宜全面檢視修正。例如：5V理論，p.161、p.163與圖4-1三處並不一致。
**** TODO 修訂:相關用語改為一致化
**** 部分專有名詞第一次出現時未解釋。例如：p.171協作式過濾（Collaborative Filtering, CF），p.180圖中CNN, RNN, DNN，p.184決策樹，p.252邏輯迴歸、k-近鄰演算法等專有名詞。
**** TODO 修訂: 加入名詞解釋
**** 多處內容流於知識陳述，無法引導學生思考資料處理與分析的目的、策略與方法。
**** 修訂:
**** 巨量資料及資料探勘的處理流程及方法說明相似，建議適當釐清或整併連結。
**** TODO 修訂：簡化資料探勘的流程說明，
**** 多處內容文意不清或內容不適當，例如p.183：
***** 「已經有部分的分析依據，所以其效果較非監督式學習好。」：與非監督式學習相較，半監督式學習可以得到什麼比較好的效果？為什麼？
***** 「我們以為Gmail很好心的提供給我們…其實是Google利用我們當免費勞工…」：說明是否合適？
***** 「半監督式學習一方面解決了這個問題，…也可提供較非監督式學習準確的預測能力。」：半監督式學習有完整解決問題嗎？又為何與非監督式學習比較預測能力？
**** TODO 修訂：重新順稿

** 修訂意見
|---------+--------+-----------------------------------------------------------------------------------------------------------------------------+----+----|
|      頁 |     行 | 意見                                                                                                                        | 必 | 建 |
|---------+--------+-----------------------------------------------------------------------------------------------------------------------------+----+----|
|     107 |        | 文句不通順，邏輯不清。                                                                                                      | V  |    |
|         |        | 修訂：重新順稿                                                                                                              |    |    |
|     108 |      2 | 何謂系統平台的濫觴？                                                                                                        | V  |    |
|         |        | 修訂：濫觴為起源/開端之意，為免爭議，可以改為 系統平台的起源                                                                |    |    |
|     108 |  -1,-2 | 「石器時代…極無效率」：應避免主觀、武斷的說法。                                                                             | V  |    |
|         |        | 修訂：依建議修正                                                                                                            |    |    |
| 108-127 |        | 內容多為細瑣的背誦性知識，未能引導學生思考系統平台的發展脈絡。                                                              | V  |    |
|         |        | 修訂：加入問題解決式試題及範例(觀察記憶體與CPU使用情形，解決問題)                                                           |    |    |
|     110 |      1 | 上段僅剩9字 列於本頁，建議整併至上頁。                                                                                      |    | V  |
|         |        | 修訂：依建議修正                                                                                                            |    |    |
|     110 |      3 | 「如前節所述，系統平台包含電腦硬體與作業系統…...」：前節何處提到作業系統？                                                  | V  |    |
|         |        | 修訂：重新順稿                                                                                                              |    |    |
|     110 |     14 | 何謂「批次」？於p.120才有較詳細之解說。                                                                                     | V  |    |
|         |        | 修訂：重新順稿                                                                                                              |    |    |
|     111 |  圖3-6 | 此圖並無法清楚說明指令集架構。                                                                                              | V  |    |
|         |        | 修訂: 重新畫圖                                                                                                              |    |    |
|     113 |  圖3-9 | 本圖有太多未說明之英文專有名詞，如cache L1~L3、northbridge、Hyper…..                                                        | V  |    |
|         |        | 修訂：簡化p113圖片，將BIOS與CMOS加入名詞解釋                                                                                |    |    |
|     114 |    1-7 | 說明不清楚。運算工作分別丟給兩個核心，是指兩個指令分別給兩個核心運算嗎？應說明何謂「一個工作」。                            | V  |    |
|         |        | 修訂：重新順稿                                                                                                              |    |    |
|     115 |      3 | GPU俗稱顯示卡？                                                                                                             | V  |    |
|         |        | 修訂: 重新順稿                                                                                                              |    |    |
|     115 | 圖3-12 | 學生看這個圖就能明瞭CPU與GPU的差異嗎？                                                                                      | V  |    |
|         |        | 修訂：補充差異                                                                                                              |    |    |
|     120 | 圖3-21 | 以學生未學過的知識作為例子。學生知道COBOL、FORTRAN嗎？                                                                      | V  |    |
|         |        | 修訂: 加註COBOL/FORTRAN介紹，此例中若以其他學生熟知的語言(C/C++)替代並不合理                                                |    |    |
|     128 | 圖3-36 | 本圖看不出使用者、應用程式、作業系統、硬體間之「關係」。                                                                    | V  |    |
|         |        | 修訂: 重新畫圖                                                                                                              |    |    |
|     129 |     -7 | 何謂BIOS？何謂CMOS？                                                                                                        | V  |    |
|         |        | 修訂：簡化p113圖片，將BIOS與CMOS加入名詞解釋                                                                                |    |    |
|     132 |     圖 | 行程狀態是否為重要概念？                                                                                                    | V  |    |
|         |        | 修訂:                                                                                                                       |    |    |
|     133 |  I百科 | Long-term scheduler等是重要概念嗎？                                                                                         | V  |    |
|         |        | 修訂:                                                                                                                       |    |    |
| 134-136 |     圖 | 宜避免中英夾雜。                                                                                                            | V  |    |
|         |        | 修訂:                                                                                                                       |    |    |
|     139 |     圖 | 內文之說明不夠清楚。何處是實體記憶體？何處是交換空間？分頁表在何處？何處有連續的記憶體空間？                                | V  |    |
|         |        |                                                                                                                             |    |    |
| 141,144 |     圖 | 未於內文提供清楚的對照說明。                                                                                                | V  |    |
|         |        |                                                                                                                             |    |    |
|     151 |     -3 | 本處提到區塊鏈但未說明。                                                                                                    | V  |    |
|         |        |                                                                                                                             |    |    |
| 152-155 |        | 題目多在檢驗學生記憶性知識，無法引導學生思考與問題解決。                                                                    | V  |    |
|         |        |                                                                                                                             |    |    |
|     161 |     -1 | 「變化性（Variability）」：內文中的5V包含變化性(Variability)，與圖4-1的5V包含Veracity，資料存在真實性問題，不一致，請統一。 | ˇ  |    |
|         |        |                                                                                                                             |    |    |
|     163 |    -10 | 標題為Veracity，5V到底包含哪五V，請統一。                                                                                   | ˇ  |    |
|         |        |                                                                                                                             |    |    |
|     164 |     11 | 「資料又…在新增」：文句不通順。                                                                                             | V  |    |
|         |        | 修訂: 重新順稿                                                                                                              |    |    |
|     171 |    -13 | 協作式過濾（Collaborative Filtering, CF）：其意涵？學生恐難理解。                                                           | ˇ  |    |
|         |        | 修訂:                                                                                                                       |    |    |
|     171 |      2 | 「實際上…不遙遠」：文句不通順。                                                                                             | V  |    |
|         |        | 修訂: 重新順稿                                                                                                              |    |    |
|     172 |     12 | 「美國加洲…」：錯別字。                                                                                                     | V  |    |
|         |        | 修訂: 重新順稿                                                                                                              |    |    |
|     176 |     -7 | 「如圖4-5的黑盒子」「如圖4-4的黑盒子」。                                                                                   | ˇ  |    |
|         |        | 修訂: 依建議修正                                                                                                            |    |    |
|     180 | 圖4-19 | 圖中的CNN, RNN, DNN專有名詞並無解釋。                                                                                       | ˇ  |    |
|         |        | 修訂:
|     180 |     -2 | 「…Hinton 與兩立學生成立的….」-->兩位。                                                                                     | ˇ  |    |
|         |        | 修訂: 依建議修正                                                                                                            |    |    |
|     184 |      3 | 決策樹：其意涵？學生恐難理解。                                                                                              | ˇ  |    |
|         |        | 修訂:                                                                                                                            |    |    |
|     184 |      3 | 「本節以辨貓/狗為例….」-->「本節以分辨貓/狗為例….」。                                                                       | ˇ  |    |
|         |        | 修訂: 依建議修正                                                                                                            |    |    |
|     186 |      3 | 「變的十分龐大」-->「變得十分龐大」。                                                                                       |    |    |
|         |        | 修訂: 依建議修正                                                                                                            |    |    |
|     187 |     -3 | 重新計算k個中心點x 標題不精確。                                                                                            | ˇ  |    |
|         |        | 修訂: 重新順稿                                                                                                                            |    |    |
|     188 |    1-4 | 此範例計算錯誤。                                                                                                            |    |    |
|     188 |      1 | 「新x值2+3+6+7/4=4.5 」-->「新x值2+3+4+6+7+9/6=…. 」。                                                                      | ˇ  |    |
|     188 |      2 | 「新y值6+5+3+6/4=5.00 」-->「新x值6+5+8+3+6+4/6=…. 」。                                                                     | ˇ  |    |
|     188 |      3 | 「新x值1+4+8+9/4=5.5 」-->「新x值1+8/2=…. 」。                                                                              | ˇ  |    |
|     188 |      4 | 「新x值9+8+8+4/4=7.25 」-->「新x值9+8/2=…. 」。                                                                             | ˇ  |    |
|         |        | 修訂: 依建議修正                                                                                                            |    |    |
|     188 | 圖4-26 | 要隨前面修正。                                                                                                              | ˇ  |    |
|         |        | 修訂: 依建議修正                                                                                                            |    |    |
|     188 |      7 | 「….新中心點(4.5,5.0)、(5.5,7.25)」-->請計算正確後修正。                                                                    | ˇ  |    |
|         |        | 修訂: 依建議修正                                                                                                            |    |    |
|     189 |     -8 | 「哪些種統計方法」：文詞不通順。                                                                                            | ˇ  |    |
|         |        | 修訂: 重新順稿                                                                                                              |    |    |
|     190 |     -7 | 「也是一種由結果導出原因的歸納過程」：文意不清，回歸方法可以由結果導出原因？                                                | V  |    |
|         |        | 修訂: 重新順稿                                                                                                              |    |    |
|     193 |        | 本章習題較多記憶題及測驗軟體工具，應增加引導學生思考或問題解決題目。                                                        | ˇ  |    |
|         |        |                                                                                                                             |    |    |
|     198 |        | 課堂練習2：第一題選用p.188第一輪分群結果繼續往下做第二輪，但p.188需整個改寫，請隨之更正。                                   | ˇ  |    |
|         |        | 修訂: 依建議修正                                                                                                            |    |    |
|---------+--------+-----------------------------------------------------------------------------------------------------------------------------+----+----|

* 任務
#+CAPTION: 負責章節
#+LABEL:fig:Labl
#+name: fig:Name
#+ATTR_LATEX: :width 400
#+ATTR_ORG: :width 400
#+ATTR_HTML: :width 500
[[file:images/chapters.jpg]]

#+CAPTION: 章節內容
#+LABEL:fig:Labl
#+name: fig:Name
#+ATTR_LATEX: :width 400
#+ATTR_ORG: :width 400
#+ATTR_HTML: :width 500
[[file:images/contents.png]]
* 課綱要求
** 系統平台(S)
- 資 S-V-1 系統平台之運作原理。
- 資 S-V-2 系統平台之未來發展趨勢。
** 資料表示、處理及分析(D)
- 資 D-V-1 巨量資料的概念。
- 資 D-V-2 資料探勘與機器學習的基本概念。
* 系統平台
在這個3C用品泛濫的世界，人手一部手機，坐下來就面對電腦，然而我們所極度依賴或沉迷的其實不是3C用品本身，而是其上的應用軟體（App）。而軟體之所以能在手機或電腦上運作，其實是系統平台提供了執行環境，此處的系統平台包括電腦硬體（hardware）、也包括管理這些硬體資源的作業系統（Operating System, OS）。

** 系統平台的發展歷史
*** 系統平台的濫觴
1945年，一位程式設計師捧著一叠打孔紙卡來到一部IBM讀卡機前，她（是的，當時所謂的程式設計師多是女生）的身後是一部重達30噸、佔地167平方公尺、運行耗電160千瓦、傳說中一旦開機會導致費城限電的龐大機器。為了這次的展示，一些工作人員已事先忙碌數天，拿著手冊調整上千個開關與線路，以便執行打孔紙卡裡的程式。

在這次的展示中，這部耗資近五十萬美元（相當於2020年的720萬美元)花了20秒計算出一顆飛行時間30秒的砲彈彈道，而同樣的工作需要一位計算員（computer，是的，這就是這個單字最早的意思，而她們也幾乎清一色是女性）以桌上型計算器努力工作兩天。這台龐然大物就是號稱史上第一台通用型電腦的ENIAC（The Electronic Numerical Intergrator and Computer）。

#+CAPTION: 正在調整ENIAC設定的幾位程式設計師
#+LABEL:fig:ENIAC-6
#+name: fig:ENIAC-6
#+ATTR_LATEX: :width 400
#+ATTR_ORG: :width 400
#+ATTR_HTML: :width 500
[[file:images/2021-12-09_08-58-52.jpg]]

在上述石器時代的電腦史，我們看到了一套極無效率的系統平台，要運算的數據以打孔卡片的型式儲存，而所謂的程式即是工作人員在ENIAC實際運算前對其所進行的繁雜硬體開關與線路設定，這導致ENIAC每次只能執行一支程式，而且要執行不同程式就必須要再對機器重新做一次設定，至於執行結果也只能以燈號顯示[fn:1][fn:2]而非儲存在電腦中。對於一部造價如此高昂的機器，這無疑是一種令人心寒的浪費；而造成ENIAC如此困境的原因之一是它沒有儲存裝置、沒有記憶體、也沒有硬碟。

Video: [[https://www.youtube.com/watch?v=bGk9W65vXNA][1946 ENIAC Computer History Remastered FULL VERSION First Large Digital Electronic Computer]]

*** 馮紐曼架構
在受邀參觀完ENIAC後，馮紐曼（John Von Neumann）一方面驚訝於其運算速度，也覺得這種程式設計方式太過複雜，1945年6月，這位八歲會算微積分、未滿30歲就與愛因斯坦等人並列普林斯頓高等研究院創院的四大老之一的天才在火車上草擬了《EDVAC 報告初稿》（First Draft of a Report on the EDVAC）[fn:3]。他在這份文件中提出了兩項影響日後所有電腦發展的建議：
1. 以二進位取代十進位元來運算和儲存資料。
2. 將電腦的設計架構分為運算單元、控制單元、記憶單元，輸入裝置與輸出裝置五大單元，此架構也被後世稱為馮紐曼架構。
#+CAPTION: 馮紐曼提出的電腦架構。圖：WIKI
#+LABEL:fig:von-arch
#+name: fig:von-arch
#+ATTR_LATEX: :width 400
#+ATTR_ORG: :width 400
#+ATTR_HTML: :width 500
[[file:images/von-arch.png]]

#+CAPTION: 影響深遠的〈EDVAC 報告初稿〉封面。圖：WIKI
#+LABEL:fig:von-paper
#+name: fig:von-paper
#+ATTR_LATEX: :width 300
#+ATTR_ORG: :width 300
#+ATTR_HTML: :width 500
[[file:images/von-paper.jpg]]

在馮紐曼架構的規範下，程式的執行不再像ENIAC那樣以硬體線路與開關進行設定，而是如同像ENIAC儲存運算數據般也存在打孔卡片上，程式要先由讀卡機讀入記憶體，要執行時再由控制單元到記憶體中讀出來執行，此即「內儲程式電腦」（Stored Program Computer）。1951 年，美國軍方根據這份報告、在馮紐曼的協助下，斥資五十萬美元打造了計算機「EDVAC」（Electronic Discrete Variable Automatic Computer）。此時的系統平台已然可輸入不同程式，進而執行產生不同的結果。

*** 從批次執行到分時系統
如本章前言所述，系統平台包含電腦硬體與作業系統，提供應用程式執行所需的環境 。而作業系統存在的目的就在於協助應用程式在電腦上執行，為此，作業系統必須監控管理電腦的硬體資源，包括記體體、儲存裝置與輸入輸出裝置。第一個具備這些功能雛型的作業系統為IBM 704電腦的GM-NAA I/O（input/output system of General Motors and North American Aviation），GH-NAA IO開發於1956年，它可以批次對不同應用程式做載入、執行、輸出結果，由於每次只能執行一支程式，所以程式必須排隊等待執行中的程式結束，這便是所謂的批次處理系統（batch processing）。

同年，UNIVAC的作業系統引入了中斷（interrupt）技術，成為日後分時共享（time-sharing）系統的先驅。此前，系統平台的記憶體只能載入一支程式，即使這支系統正在列印大量資料，也要等全部資料列印完畢才能載入下一支程式進來執行。而中斷技術則允許系統平台載入多個程式，當一支程式正在進行輸入/輸出動作時，該程式就會被中斷，此時第二支程式就可立刻被執行，從而大幅提高硬體的執行效能。

#+begin_verse
註：這裡的中斷（interrupt）並不是停止的意思， 而是「程序的狀態進入中斷狀態，CPU 不會理會該程序」。
#+end_verse

此後，隨著記憶體技術由磁鼓（Drum memory）、磁芯（magnetic core）進步至半導體，儲存裝置由循序存取的磁帶（tape）進步至隨機存取的磁碟（disk）、作業系統使用介面（User Interface, UI）由文字命令模式進步到圖形使用者介面（Graphical User Interface, GUI），系統平台也隨之一路進化至今。
** 系統平台的架構及其運作
*** 系統平台的架構
系統平台由電腦硬體及運作其上的作業系統所組成，其基本架構如圖XX所示，
*** 系統平台的運作
- 資源分配
- 工作排程
** 參考資料
*** CPU演進
- [[https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8][中央處理器-WIKI]]
- [[https://itw01.com/SI2UEMU.html][沙子變成積體電路（cpu）的全過程]]
- [[https://kknews.cc/news/o83y5e5.html][科普：什麼是LGA，PGA，BGA類型的CPU]]
- [[https://read01.com/KODkdN.html#.YboVgX1ByDU][CPU是怎麼製造處理的？]]
- [[https://cn.nomuwiki.com/575426-history-of-general-purpose-cpus-UZHWGD][通用CPU的歷史]]
- [[https://www.easyatm.com.tw/wiki/CPU%E7%99%BC%E5%B1%95%E5%8F%B2][CPU發展史]]
- [[https://zh.wikipedia.org/zh-tw/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8][中央處理器]]
- [[https://www.easyatm.com.tw/wiki/CPU%E5%A4%9A%E6%A0%B8%E5%BF%83][CPU多核心]]
- [[https://www.zhihu.com/question/381848186][CPU未来会朝什么方向发展？]]
- [[https://www.gushiciku.cn/dc_news/digital_Zkxk][硬體歷史學堂：開創時代的 Intel 8086 處理器]]
- [[https://kknews.cc/other/34xgxyy.html][中央處理器(cpu)工作原理]]
- [[https://kknews.cc/tech/nmpqlx5.html][回顧Intel晶片發展之路（一）]]
- [[https://highscope.ch.ntu.edu.tw/wordpress/?p=80575][智慧運算與處理器架構的演進趨勢]]
- [[https://kknews.cc/zh-tw/tech/4jgmkav.html][人工智慧時代GPU為什麼這麼重要？CPU和GPU的區別和聯繫全在這裡]]
- [[https://kopu.chat/2017/11/10/2012-deeplearning-nvidia-gpu/][2012年，「GPU+深度學習」真正引爆革命火花]]
*** 執行緒
- [[https://www.locks.wiki/a_shuma/202106/183875.html][CPU的核心數與執行緒數有什麼區別]]: 很清楚
*** 顯示器
- [[https://zh.wikipedia.org/wiki/%E9%98%B4%E6%9E%81%E5%B0%84%E7%BA%BF%E7%AE%A1][陰極射線管]]
- [[https://zh.wikipedia.org/wiki/%E6%98%BE%E7%A4%BA%E5%99%A8#cite_note-2][顯示器]]
- [[https://kknews.cc/zh-tw/science/pnn4m3z.html][顯示器的發展歷史]]
- [[https://www.thoughtco.com/television-history-cathode-ray-tube-1991459][Television History and the Cathode Ray Tube]]
- [[https://www.vssmonitoring.com/who-invented-the-first-computer-monitor/][Who Invented the First Computer Monitor? | Various Types Developed Over Time With Pros & Cons]]
- [[https://www.merckgroup.com/tw-zh/expertise/displays/solutions/liquid-crystals/history-of-lcd-displays.html][液晶顯示器的發展史]]
- [[https://kknews.cc/zh-tw/digital/vree93l.html][9年了！筆記本屏幕解析度為何維持在1080P]]
- [[https://www.benq.com/zh-tw/knowledge-center/technology/what-is-4k-tv.html][什麼是4K電視，差異在哪？網路上又有真假4K一說？]]
- [[https://www.kocpc.com.tw/archives/398427][近期手機常強調的「螢幕更新率」與「觸控採樣率」是什麼？]]
*** 硬碟
- [[https://twgreatdaily.com/IRjuZGwBUcHTFCnfxVB3.html][全球存儲簡史（第二版）]]
- [[https://www.edntaiwan.com/20180913nt02-ibm-intros-1st-computer-disk-storage-unit-september13-1956/][首套電腦磁碟儲存裝置在1956年9月13日誕生]]
- [[https://wmos.info/archives/7600][談談 SSD硬碟的前世今生]]
*** 軟碟
- [[https://forum.gamer.com.tw/C.php?bsn=60030&snA=557600][【情報】軟碟片不死！波音 747 一直到現在 仍透過 3.5 吋軟碟更新重要飛航軟體]]
*** 記憶體
- [[http://www.righto.com/2019/04/a-look-at-ibm-s360-core-memory-in-1960s.html][A look at IBM S/360 core memory: In the 1960s, 128 kilobytes weighed 610 pounds]] : 詳盡
- [[https://zh.wikipedia.org/wiki/%E7%A3%81%E8%8A%AF%E8%A8%98%E6%86%B6%E9%AB%94][磁芯記憶體]]
- [[https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E9%9A%8F%E6%9C%BA%E5%AD%98%E5%8F%96%E5%AD%98%E5%82%A8%E5%99%A8][動態隨機存取記憶體]]
- [[https://www.softwareok.com/?seite=faq-This-and-That-or-Other&faq=74][DDR, DDR2, DDR3, DDR4, DDR5 - Data transfer speed!]]
- [[https://isite.tw/2016/05/21/15943/4][歷代電腦用 SDRAM 橫向對比]]
- [[https://graniteriverlabs.com.tw/2021/05/25/grl-an-ddr/][【技術文章】DDR Overview]]
- [[https://www.materialsnet.com.tw/DocView.aspx?id=25211][磁性材料及元件技術最新發展]]
- [[https://www.computerdiy.com.tw/ddr4-ram/][二進位的世界：記憶體發展簡史 / DDR4 VS. DDR3 效能評測]]
- [[https://twgreatdaily.com/IRjuZGwBUcHTFCnfxVB3.html][全球存儲簡史（第二版）]]
- [[https://isite.tw/2016/05/21/15943/4][電腦達人養成計畫 3-5：DDR3、DDR4？歷代 SDRAM 演進史]]
*** 驅動程式
- [[https://www.gushiciku.cn/pl/p1UR/zh-tw][我寫了一份作業系統詞典送給你！]]
- [[https://kknews.cc/zh-tw/tech/99j8gv8.html][什麼是驅動程序?應用程式，作業系統，驅動程序的關係?]]
- [[https://support.sega.com/hc/zh-tw/articles/201556511-%E4%BB%80%E9%BA%BC%E6%98%AF%E9%A9%85%E5%8B%95%E7%A8%8B%E5%BC%8F-%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0-][什麼是驅動程式？如何更新？ ]]
- [[https://www.youtube.com/watch?v=ntEBUnkIO2U&list=PL9jciz8qz_zyO55qECi2PD3k6lgxluYEV&index=8][周志遠作業系統 Ch1: Introduction (A): What's an OS?]]
- [[https://ys.ylib.com/UnitCont.aspx?ID=881][原來電腦這麼大！ ]]
- [[https://www.vmware.com/tw/solutions/virtualization.html][什麼是虛擬化？ ]]
- [[https://medium.com/tsungs-blog/day16-%E8%AA%8D%E8%AD%98%E9%9B%B2%E7%AB%AF%E6%8A%80%E8%A1%93-%E4%BA%94-%E8%99%9B%E6%93%AC%E5%8C%96%E6%8A%80%E8%A1%93-2-64c8c0e3a31][Day16-認識雲端技術(五)虛擬化技術-2]]
- [[https://www.itread01.com/content/1547385663.html][批處理系統、分時處理系統、實時處理系統簡介]]
- [[https://www.itsfun.com.tw/%E6%89%B9%E8%99%95%E7%90%86%E7%B3%BB%E7%B5%B1/wiki-8617421-4809711][批處理系統]]
- [[https://arthurchiao.art/blog/what-is-an-os-zh/][[译] 操作系统是什么？1954-1964 历史调查（2019）]]
*** 作業系統
- [[https://zh.wikipedia.org/wiki/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1%E6%AD%B7%E5%8F%B2%E5%B9%B4%E8%A1%A8][作業系統歷史年表]]
- [[https://www.easyatm.com.tw/wiki/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1%E7%99%BC%E5%B1%95%E5%8F%B2][作業系統發展史]]
- [[https://www.computerhistory.org/timeline/1981/][Timeline of Computer History]]
- [[https://www.orb-data.com/the-history-of-the-operating-system-from-paper-tape-to-openshift/][The History of the Operating System – From paper tape to Red Hat OpenShift]]
- [[https://zh.wikipedia.org/wiki/Android][Android]]
- [[https://pnote.eu/notes/computer-history/][Computer history cheatsheet: from vacuum tubes to smartphones]]
- [[http://epaper.gotop.com.tw/pdf/aeb002131.pdf][最新計概-OS]]
- [[https://ecomputernotes.com/fundamental/disk-operating-system/batch-processing-operating-system][什麼是批處理操作系統？]]
- [[https://www.investopedia.com/terms/b/batch-processing.asp][Batch Processing]]
- [[https://zh.wikipedia.org/wiki/%E6%89%B9%E5%A4%84%E7%90%86%E4%BB%BB%E5%8A%A1][批次處理任務]]
- [[https://www.javatpoint.com/batch-operating-system][Batch Operating System]]
- [[https://ecomputernotes.com/fundamental/disk-operating-system/batch-processing-operating-system][What is Batch Processing Operating System?]]
- [[https://www.computerhistory.org/collections/catalog/102657016][Man working on IBM 360 terminal]]
- [[http://www.corestore.org/36.htm][Corestore Collection - IBM System/36 5360]]
- [[https://discourse.world/h/2019/04/02/IBM-System-i(aka-AS%E0%AD%B5400)-How-we-did-green-screen-application-auto-tests][IBM System i (aka AS / 400)]]
- [[http://www.hope.com.tw/DispArt/tw/UNIX/SAN/IBM/%E4%B8%80%E8%88%AC%E6%80%A7%E4%BC%BA%E6%9C%8D%E4%B8%BB%E6%A9%9F/0108011657PK.shtml][大型主機、專屬系統的現在與未來]]
- [[https://www.sciencedirect.com/topics/social-sciences/mainframe][Mainframe]]
- [[https://www.investopedia.com/terms/b/batch-processing.asp][批量處理]]
- [[https://www.cs.cornell.edu/wya/AcademicComputing/text/earlytimesharing.html][Early Timesharing]]
- [[https://tw.azartwiki.com/328408-time-sharing-system-evolution-HFOXBD][分時系統的發展]]
- [[https://www.cs.cornell.edu/wya/AcademicComputing/text/earlytimesharing.html][早期分時]]
- [[https://pnote.eu/notes/computer-history/][Computer history cheatsheet: from vacuum tubes to smartphones]]
- [[https://sites.google.com/site/smartxiaofish/c%E8%AF%AD%E8%A8%80%E5%92%8Cunix%E7%9A%84%E5%8F%91%E6%98%8E%E5%8F%B2][C語言和Unix的發明史]]
- [[https://www.ctimes.com.tw/culture/showbox-tw.asp?o=HJQ26AFN3PCCU-0SA9][UNIX怎麼來的？]]
- [[https://www.newton.com.tw/wiki/Ken%20Thompson][Ken Thompson]]
- [[https://www.newton.com.tw/wiki/B%E8%AA%9E%E8%A8%80/1845842][B語言]]
- [[https://kknews.cc/zh-tw/news/6aejrjm.html][UNIX之父——一個上帝視角的存在]]
- [[https://www.ctimes.com.tw/culture/showbox-tw.asp?o=HJQ26AFN3PCCU-0SA9][科技典故]]
- [[https://www.gushiciku.cn/pl/pMtq/zh-tw][你需要了解作業系統發展歷程]]
- [[https://www.gushiciku.cn/pl/gAb6/zh-tw][程式設計師盤點：從開發 Unix 系統到成為飛行員！他度過了光輝的人生]]
- [[http://computer.u-3c.com/article3507.htm][Mac誕生30周年 人類資訊時代的演變史]]
- [[https://medium.com/%E5%AD%B8%E8%A1%93%E8%AA%AA%E6%9B%B8%E4%BA%BA/%E5%85%A8%E9%8C%84-parc-%E8%A6%96%E7%AA%97-%E6%BB%91%E9%BC%A0-%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-%E8%83%8C%E5%BE%8C%E7%9A%84%E8%8B%B1%E9%9B%84%E4%BA%BA%E7%89%A9%E8%AA%95%E7%94%9F%E5%9C%B0-5539508256f6][全錄 PARC-「視窗、滑鼠、物件導向」背後的英雄人物誕生地]]
- [[http://www.righto.com/2017/10/the-xerox-alto-steve-jobs-and-computer.html][Steve Jobs, the Xerox Alto, and computer typography ]]
- [[https://zh.wikipedia.org/wiki/Xerox_Alto][Xerox Alto]]
- [[https://panx.asia/archives/47327][第一款配有滑鼠的商業電腦「Xerox Star」上市]]
- [[https://zh.wikipedia.org/wiki/UNIX][UNIX]]
** 電腦類型
- [[https://pansci.asia/archives/63992][超級電腦能做什麼？讓”華生”告訴你]]
- [[https://www.gechic.com/tw/windows-10-iot-core-raspberry-with-usb-touch-monitor/][樹莓派物聯網應用—安裝Windows 10 IoT 核心版與15.6吋觸控螢幕]]
- [[https://www.digitimes.com.tw/iot/package_show.asp?cat=158&id=0000572073_2jy1ndqg6c3jfi4m2mpxt&packageid=13728][「成本不到四千元」傳統機械業者用樹莓派自造機聯網裝置 ]]
- [[https://jason-chen-1992.weebly.com/home/introduction-to-raspberry-pi][【物聯網】入門介紹－樹莓派：一張信用卡大小的微電腦]]
- [[http://blog.itist.tw/2015/11/how-to-choosing-operating-system-for-raspberry-pi.html][Raspberry Pi 的基礎 - 24 套作業系統大集合，我該選誰？]]
- [[https://www.ithome.com.tw/news/99447][一片Raspberry Pi能跑多少個Container？答案驚人]]
- [[https://www.pcmarket.com.hk/%E6%B7%BA%E8%AB%87%E9%9B%BB%E8%B7%AF%E6%9D%BF-microbit-vs-arduino-vs-raspberry-pi/][淺談電路板　micro:bit vs Arduino vs Raspberry Pi]]
- [[https://kknews.cc/tech/pblxmbz.html][Arduino、micro:bit 和掌控板究竟有什麼區別？]]
- [[https://ppfocus.com/0/edf80234e.html][Arduino與樹莓派 哪款開發板更適合你]]
** 系統平台的運作
- [[https://ourtechroom.com/tech/cmos-bios-function-replace-cmos-battery/][What is CMOS and BIOS in depth ?]]
- [[https://zh.wikipedia.org/wiki/BIOS][BIOS]]
- [[https://www.blackhole.com.tw/Dr82.htm][什麼是BIOS]]
- [[https://jakonson.pixnet.net/blog/post/27767165][即將換掉傳統 BIOS 的 UEFI，你懂了嗎 @ 阿瑋師的分享 痞客邦.html]]
- [[https://ithelp.ithome.com.tw/articles/10240531][Day05 開機流程中的BIOS跟UEFI開機檢測程式 ]]
- [[https://tw.easeus.com/partition-manager-tips/uefi-vs-bios.html][UEFI vs BIOS：有什麼差異以及哪一個更好]]
- [[https://jakonson.pixnet.net/blog/post/27767165][即將換掉傳統 BIOS 的 UEFI，你懂了嗎]]
- [[https://medium.com/ai%E5%8F%8D%E6%96%97%E5%9F%8E/other-uefi-bios-legacy-%E6%B7%BA%E8%AB%87%E4%B8%BB%E6%A9%9F%E6%9D%BFuefi%E8%A7%80%E5%BF%B5%E8%88%87%E8%BF%B7%E6%80%9D-%E8%BD%89%E9%8C%84-dc86f61b85bd][(Other)UEFI? BIOS? Legacy? 淺談主機板UEFI觀念與迷思(轉錄)]]
- [[https://kknews.cc/zh-tw/code/2vzgyjy.html][漲知識！告訴你什麼是電腦的BIOS和CMOS?]]
- [[https://phchiu.pixnet.net/blog/post/6503633][電腦開機流程]]
- [[https://dywang.csie.cyut.edu.tw/dywang/linuxSystem/node81.html][開機流程簡介]]
- [[https://zh.wikipedia.org/wiki/%E5%95%9F%E5%8B%95%E7%A8%8B%E5%BC%8F][啟動程式]]
- [[https://zhuanlan.zhihu.com/p/351606449][【干货】BIOS、UEFI、MBR、GPT、GRUB 到底是什么意思？]]
- [[https://www.linwei.com.tw/forum-detail/76/][磁碟分割MBR、GPT是什麼？]]
- [[https://texhello.pixnet.net/blog/post/12304306-%E9%9B%BB%E8%85%A6%E9%96%8B%E6%A9%9F%E7%9A%84%E9%81%8E%E7%A8%8B(%E8%BD%89)][電腦開機的過程(轉)]]
- [[http://120.105.184.250/peiyuli/network-2/%E9%96%8B%E9%97%9C%E6%A9%9F%E6%B5%81%E7%A8%8B.htm][ 開關機流程與 loader]]
- [[https://linux.vbird.org/linux_basic/centos5/0510osloader-centos5.php#startup_loader][第二十章、開機流程、模組管理與 Loader - for CentOS 5.x]]
- [[https://ourtechroom.com/tech/cmos-bios-function-replace-cmos-battery/][What is CMOS and BIOS in depth ?]]
- [[https://ipwithease.com/difference-between-bios-and-cmos/][Difference between BIOS and CMOS]]
- [[https://zhidao.baidu.com/question/164243183.html][电脑的CMOS在哪个地方？]]
- [[https://blog.xuite.net/open.mark/20051231/4776455-%E8%A9%B3%E7%B4%B0%E8%A7%A3%E8%AA%AA+BIOS+%E8%88%87+CMOS][詳細解說 BIOS 與 CMOS]]
- [[https://kknews.cc/zh-tw/digital/63y4pnq.html][硬碟分區、重裝系統，選MBR還是GPT格式，有講究]]
- [[https://www.reneelab.net/mbr-or-gpt.html][如何初始化磁碟，且選擇MBR還是GPT?]]
- [[https://www.youtube.com/watch?v=TRwXKWQ2i00][MVS (or z/OS) console operations - M53]]
- [[https://mediacenter.ibm.com/media/z+OSMF+Operator+Console+Tutorial/1_5qcip6d3/101043781][z/OSMF Operator Console Tutorial ]]
- [[https://mainframenation.com/mainframe/how-to-get-a-mainframe-access/][How to get a Mainframe access]]
- [[https://www.twblogs.net/a/5b89625c2b71775d1ce18393][搭建一個屬於自己的Mainframe 之 windows運行篇]]
** scheduling
- [[https://ithelp.ithome.com.tw/articles/10202866][第三天 程序(process)概念--上 ]]
- [[https://totoroliu.medium.com/program-process-thread-%E5%B7%AE%E7%95%B0-4a360c7345e5][Program/Process/Thread差異]]
- [[https://chentsungyu.github.io/2020/03/21/OS/%5BOS%5D%20%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1%E7%AD%86%E8%A8%98-Process/][[OS] 作業系統筆記-Process]]
- [[https://sls.weco.net/node/21323][03. 行程觀念 (Process Concept)]]
- [[https://superuser.com/questions/1299746/whats-web-content-in-top-doing-taking-up-memory][What's "Web Content" in "top" doing taking up memory?]]
- [[https://www.guru99.com/difference-between-process-and-thread.html][Process vs Thread: What’s the difference?]]
- [[https://mnya.tw/cc/word/1369.html][作業系統之中央處理器排程（CPU Scheduling）]]
- [[https://zh.wikipedia.org/wiki/%E9%A5%A5%E9%A5%BF_(%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F)][飢餓 (作業系統)]]
- [[https://zys-notes.blogspot.com/2020/10/blog-post_15.html][ 計算機概論-作業系統(排班演算法)]]: 非常清楚
- [[https://mropengate.blogspot.com/2015/01/operating-system-ch5-cpu-scheduling.html][OS - Ch5 排程 CPU Scheduling]]
- [[https://ithelp.ithome.com.tw/articles/10203990][ 第八天 CPU Scheduling--上 ]]
** 記憶體管理
- [[https://sls.weco.net/node/21328][08. 記憶體管理策略 (Memory Management Strategies)]]
- [[https://iter01.com/525568.html][大廠面試愛問的「排程演算法」，20 張圖一舉拿下]]
- [[https://www.cs.uic.edu/~jbell/CourseNotes/OperatingSystems/2_Structures.html][Operating-System Structures ]]
- [[https://iter01.com/526344.html][作業系統——記憶體管理學習筆記]]
- [[https://www.sciencedirect.com/topics/computer-science/modern-operating-system][Modern Operating System]]
- [[https://stackoverflow.com/questions/4970421/whats-the-difference-between-virtual-memory-and-swap-space][What's the difference between "virtual memory" and "swap space"?]]
- [[https://www.w3study.wiki/a/202105/88706.html][Linux 交換空間 swap space]]
- [[https://mropengate.blogspot.com/2015/01/operating-system-ch9-virtual-memory.html][OS - Ch9 虛擬記憶體 Virtual Memory]]
- [[https://zh.wikipedia.org/wiki/%E9%A1%B5%E7%BC%BA%E5%A4%B1][分頁錯誤]]
- [[https://superuser.com/questions/42854/what-is-virtual-memory][What is virtual memory?]]
- [[https://www.programmersought.com/article/14816458236/][ Cache algorithm (the difference between FIFO, LRU, and LFU) ]]
- [[https://kim85326.github.io/2018/01/09/CH8-%E8%A8%98%E6%86%B6%E9%AB%94%E7%AE%A1%E7%90%86-(Memory-Management-Strategies)/][CH8 記憶體管理 (Memory Management Strategies)]]
- [[https://iter01.com/525568.html][大廠面試愛問的「排程演算法」，20 張圖一舉拿下]]
- [[https://kim85326.github.io/2018/01/09/CH9-%E8%99%9B%E6%93%AC%E8%A8%98%E6%86%B6%E9%AB%94%E7%AE%A1%E7%90%86-(Virtual-Memory-Management)/][CH9 虛擬記憶體管理 (Virtual-Memory Management)]]
- [[https://www.cs.uic.edu/~jbell/CourseNotes/OperatingSystems/2_Structures.html][Operating-System Structures ]]
- [[https://zh.wikipedia.org/wiki/%E5%88%86%E9%A0%81%E8%A1%A8][分頁表]]
** 網路路由
** 系統平台的未來
*** Virtualization
- [[https://kopu.chat/2017/08/11/%E9%9B%B2%E7%AB%AF%E9%81%8B%E7%AE%97%E7%9A%84%E9%97%9C%E9%8D%B5%E5%9F%BA%E7%A4%8E%EF%BC%9A%E8%99%9B%E6%93%AC%E6%A9%9F/][實現雲端運算的關鍵基礎：虛擬機 (Virtual Machine)]]
- [[https://zh.wikipedia.org/wiki/Windows_IoT][Windows IoT]]
- [[https://www.inside.com.tw/article/6737-what-is-the-gateway-and-why-should-i-care][IoT Gateway]]
- [[https://www.sap.com/taiwan/insights/what-is-iot-internet-of-things.html][何謂物聯網（IoT）？]]
- [[https://www.inside.com.tw/article/6737-what-is-the-gateway-and-why-should-i-care][什麼是閘道器，為何值得你的關注？]]
- [[https://zh.wikipedia.org/wiki/Hypervisor][Hypervisor]]
- [[https://zh.wikipedia.org/wiki/%E8%99%9B%E6%93%AC%E5%8C%96][虛擬化]]
- [[https://twgreatdaily.com/0MzFO3YBxV5JH8q_Kzga.html][什麼是Hypervisor伺服器？]]
- [[https://www.redhat.com/zh-tw/topics/virtualization][認識虛擬化]]
- [[https://www.alibabacloud.com/tc/knowledge/what-is-virtualization][ 何謂虛擬化？ ]]
- [[https://kknews.cc/zh-tw/code/jlrl2zp.html][為什麼要進行伺服器虛擬化及伺服器虛擬化的工作原理]]
- [[https://kknews.cc/code/abx82gg.html][虛擬化伺服器越來越普遍，它對企業有什麼幫助？]]
- [[https://kknews.cc/tech/5a3zgml.html][虛擬化，你造嗎？]]
- [[https://kknews.cc/tech/k8rox4v.html][細數雲計算的核心技術-系統虛擬化]]
- [[https://read01.com/zh-tw/n2x32M.html][虛擬化概念]]
- [[https://kknews.cc/zh-hk/tech/g44mmo8.html][技術分享：Hypervisor伺服器]]
- [[https://www.digitimes.com.tw/tech/dt/n/shwnws.asp?cnlid=14&id=0000124512_Q6M6FCIJ0CV9DS30T4KRD][虛擬機器(Virtual Machines；VMs)]]  -
- [[https://zh-tw.coderbridge.com/series/9867865723164ad6b9de2a479ad9a37c/posts/c59e06e4173c49b1aece1df53ab90fd9][虛擬化技術]]
- [[https://zhuanlan.zhihu.com/p/100526650][計算虛擬化詳解]]
*** 分散式系統 v.s. 雲端運算
- [[https://ithelp.ithome.com.tw/articles/10215645][ Day 1 - 分散式系統筆記 ]]
- [[https://kopu.chat/2017/08/11/%E9%9B%B2%E7%AB%AF%E9%81%8B%E7%AE%97%E7%9A%84%E9%97%9C%E9%8D%B5%E5%9F%BA%E7%A4%8E%EF%BC%9A%E8%99%9B%E6%93%AC%E6%A9%9F/][實現雲端運算的關鍵基礎：虛擬機 (Virtual Machine)]]
- [[http://lms.tzuchi.com.tw/epaper/artical/index.php?id=file/14/digiinfo_7][雲端運算與虛擬化技術 ]]
- [[https://kknews.cc/tech/opyp98m.html][雲計算與虛擬化有什麼區別]]
- [[https://www.inside.com.tw/article/4428-big-data-4-hadoop][認識大數據的黃色小象幫手 –– Hadoop]]
- [[https://kknews.cc/zh-tw/code/8xonx8e.html][兩種不同的動態路由RIP與OSPF協議原理解析及比較]]
- [[http://dic.vbird.tw/operating_system/2020unit06.php][第 06 章 - 計算機概論 - 作業系統概論]]
- [[https://www.inside.com.tw/article/4428-big-data-4-hadoop][認識大數據的黃色小象幫手 –– Hadoop]]
- [[https://www.itread01.com/content/1548141879.html][Spark：一個高效的分散式計算系統]]
- [[https://www.youtube.com/watch?v=_QkKw82ge6g][Hadoop内部原理：分布式系统如何实现？存储、计算和调度]]
- [[https://www.youtube.com/watch?v=aqnuKxy_Av8][為何會有分散式架構的出現？ AWS GCP Azure Alibaba 入門|介紹|程式|教學|教程]]: 很清楚
- [[https://www.youtube.com/watch?v=5S8-SLBNgcw][【CloudMile 科技情報站 EP.2】雲端淺談：公有雲、混合雲、私有雲？徹底了解 IAAS, SAAS, PAAS]]: 很清楚
- [[https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&ved=2ahUKEwjI_eK0kJz1AhVdslYBHQwrBVk4ChAWegQIExAB&url=https%3A%2F%2Fgrb-topics.stpi.narl.org.tw%2Ffile%2Fdownload%3FflsId%3D4b1141c2689868230169183edc88447b&usg=AOvVaw1sAhSP7LjCpah5PzXf1VB5][淺談雲端運算]]: PDF
- [[https://www.ibm.com/tw-zh/cloud/learn/cloud-computing][雲端運算：IBM]]
- [[https://ithelp.ithome.com.tw/articles/10076591][高有效性簡介30篇: 群組運算 (5) ]]
- [[https://www.itread01.com/content/1549259464.html][雲端計算與分散式概述]]
- [[https://blog.xuite.net/michaelandqqatxuite/twblog/124065801][雲端運算興起 資訊業戰火再啟]]
- [[https://codertw.com/%E9%9B%B2%E7%AB%AF%E9%81%8B%E7%AE%97/9529/][分散式和叢集區別？什麼是雲端計算平臺？分散式的應用場景？]]
- [[https://www.ithome.com.tw/article/93004][徹底了解Cloud Computing｜由來篇]]
- [[https://pcnow.cc/p/jAbmpd4064.html][有哪些通俗易懂的例子可以解釋 IaaS、PaaS、SaaS 的區別？]]
- [[https://www.marieclaire.com.tw/lifestyle/career/50211][熬夜做出「口罩地圖」！這群用鍵盤救國的熱血工程師：就算只能幫大家節省１０分鐘，我也要寫]]
- [[https://www.marieclaire.com.tw/lifestyle/career/50211?atcr=f95a9][熬夜做出「口罩地圖」！這群用鍵盤救國的熱血工程師：就算只能幫大家節省１０分鐘，我也要寫]]
- [[https://www.ithome.com.tw/article/93007][徹底了解Cloud Computing｜服務型式篇]]
- [[https://www.ithome.com.tw/article/93008][徹底了解Cloud Computing｜IaaS（Infrastructure as a Service）]]
- [[https://www.ithome.com.tw/article/93009][徹底了解Cloud Computing｜PaaS（Platform as a Service）]]
- [[https://www.ithome.com.tw/article/93010][徹底了解Cloud Computing｜SaaS（Software as a Service）]]
- [[https://www.ithome.com.tw/article/93013][徹底了解Cloud Computing｜部署模式]]
- [[https://www.ithome.com.tw/article/93014][徹底了解Cloud Computing｜關鍵技術]]
- [[https://www.ithome.com.tw/article/93015][徹底了解Cloud Computing｜安全挑戰]]
- [[https://www.ithome.com.tw/article/93016][徹底了解Cloud Computing｜對產業的影響]]
- [[https://www.tts.bz/archives/667][全球較知名的IaaS、PaaS雲端服務廠商總列表(2011年10月整理)]]
- [[https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%9B%86%E7%BE%A4][電腦叢集]]
- [[https://zh.wikipedia.org/wiki/%E7%BD%91%E6%A0%BC%E8%AE%A1%E7%AE%97][網格計算]]
- [[https://www.gushiciku.cn/pl/phwz/zh-tw][一文詳解分散式系統]]
- [[https://www.itread01.com/content/1549259464.html][雲端計算與分散式概述]]
- [[https://zh.wikipedia.org/wiki/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97][分散式運算]]
- [[https://morosedog.gitlab.io/technology-20200228-tech-5/][技術觀念 | 淺談分散式系統 - 什麼是分散式系統]]
- [[https://www.inside.com.tw/article/4428-big-data-4-hadoop][Hadoop 簡史：黃色小象的由來]]
*** 物聯網
- [[https://www.ibm.com/blogs/industries/little-known-story-first-iot-device/][The little-known story of the first IoT device]]
- [[https://dataprot-net.translate.goog/statistics/iot-statistics/?_x_tr_sl=auto&_x_tr_tl=zh-TW&_x_tr_hl=zh-TW][Internet of Things statistics for 2021 – Taking Things Apart]]
- [[https://iter01.com/641852.html][全球物聯網裝置數量增長9%，達到123億]]
- [[https://findstack.com/internet-of-things-statistics/][The Ultimate List of Internet of Things Statistics for 2022]]
- [[https://ithelp.ithome.com.tw/articles/10216256][[Day 1] 物聯網，一段歷史 ]]
- [[https://arvindr21.github.io/js-iot/#/12][The First IoT Device*]]
- [[http://3smarket-info.blogspot.com/2018/10/iot-gateway.html][一文讀懂 IoT Gateway 設計]]
- [[https://zh.wikipedia.org/wiki/ZigBee#cite_note-1][ZigBee]]
- [[https://zh.wikipedia.org/wiki/Z-Wave][Z-Wave]]
- [[https://medium.com/@vjanuradhawick/beginners-guide-to-iot-e1ce45c62723][Beginners Guide to IoT]]
- [[https://ithelp.ithome.com.tw/articles/10240618][Day13 - 物聯網介紹 ]]
- [[https://www.sap.com/taiwan/insights/what-is-iot-internet-of-things.html][何謂物聯網（IoT）]]
- [[https://oosga.com/pillars/iot/][IoT物聯網 – 定義、應用領域、以及產業實際案例]]
- [[https://www.ibm.com/tw-zh/topics/industry-4-0][何謂工業 4.0？]]
- [[https://zh.wikipedia.org/wiki/%E7%89%A9%E8%81%94%E7%BD%91][物聯網]]
- [[https://zh.wikipedia.org/wiki/%E9%82%8A%E7%B7%A3%E9%81%8B%E7%AE%97][邊緣運算]]
- [[https://medium.com/it-digital-%E4%BA%92%E8%81%AF%E7%B6%B2/%E9%9B%B2%E8%A8%88%E7%AE%97%E4%B9%8B%E4%B8%8A%E9%82%84%E6%9C%89%E9%9C%A7%E8%A8%88%E7%AE%972-%E9%82%8A%E7%B7%A3%E8%A8%88%E7%AE%97-edge-computing-%E7%9A%84%E7%94%A8%E4%BE%8B%E5%92%8C%E7%89%A9%E8%81%AF%E7%B6%B2-iot-98193ef4add1][邊緣計算(Edge computing)的用例和物聯網 (IoT)]]
- [[https://www.alibabacloud.com/tc/knowledge/what-is-edge-computing][何謂邊緣運算？]]
- [[https://www.ibm.com/tw-zh/cloud/what-is-edge-computing][何謂邊緣運算？]]
- [[https://fc.bnext.com.tw/articles/view/29][邊緣運算三大企業應用關鍵，緊繫雲端、工業物聯網、5G]]
- [[https://www.gigabyte.com/tw/Article/living-on-the-edge][什麼是邊緣運算(Edge Computing)?]]
- [[https://read01.com/jE00QOJ.html][物聯網架構的4個階段，如何引導數據往返於設備和數據中心]]
- [[https://kknews.cc/zh-tw/tech/e6v2gqr.html][您必須了解的15個標準物聯網協議]]
- [[https://sites.google.com/site/lohos2nchu/1-12?tmpl=%2Fsystem%2Fapp%2Ftemplates%2Fprint%2F&showPrintDialog=1][物聯網，是什麼？Internet Of Things]]
- [[https://ithelp.ithome.com.tw/articles/10216605][物聯網加穿戴裝置願景 ]]
- [[https://www.youtube.com/watch?v=JEooc8yHlWY][【IBM 雲講堂】第二集：實踐 DevOps 交付雲原生應用]]
- [[https://read01.com/jE00QOJ.html][物聯網架構的4個階段，如何引導數據往返於設備和數據中心]]
- [[https://www.lanner-america.com/blog/what-is-an-iot-gateway/][What is an IoT Gateway?]]
- [[https://www.machsync.com.tw/information/IoT][物聯網是什麼意思？生活上有什麼應用例子？]]
- [[https://www.ofca.gov.hk/filemanager/ofca/en/content_928/SIPS_Lecture_IoT.pdf][物聯網最主要的三種層面，特徵及優缺點]]
- [[https://kknews.cc/zh-tw/tech/rbmv92x.html][物聯網的發展可以分為哪四個階段？]]
*** 元宇宙
- [[https://www.womenshealthmag.com/tw/mental/relationship/g38206317/metaverse/][元宇宙懶人包」元宇宙是什麼？為何臉書搶進投資？對生活有什麼改變一次看]]
- [[https://www.wealth.com.tw/articles/95be5b56-4cee-4e0c-b869-4db3af026d55][黃哲斌：五部電影看懂神祕「元宇宙」]]
- Video: [[https://www.youtube.com/watch?v=SAL2JZxpoGY][Facebook gives a glimpse of metaverse, its planned virtual reality world]]
- [[https://zh.wikipedia.org/wiki/%E8%99%9A%E6%8B%9F%E7%8E%B0%E5%AE%9E][虛擬實境VR]]
- [[https://www.mirle.com.tw/solution/Detail/1557/%E7%B9%81%E9%AB%94/%E6%99%BA%E6%85%A7%E5%B7%A5%E5%BB%A0%E7%9A%84VR_AR_MR%E6%87%89%E7%94%A8][智慧工廠的VR_AR_MR應用]]
- [[https://benevo.pixnet.net/blog/post/63012046-%E5%9B%9B%E7%A8%AE%E5%AF%A6%E5%A2%83---vr%E3%80%81ar%E3%80%81sr%E3%80%81mr][四種實境 - VR、AR、SR、MR @ ]]
- [[https://unwire.pro/2021/12/19/metaverse/columnist/][從「元宇宙」興起看 XR 技術如何實現虛擬新世界]]
- [[https://www.edntaiwan.com/20210813nt71-xr-ar-vr-mr-difference/][xR、AR、VR 與 MR：在實境上的區別]]
- [[https://udn.com/news/story/7240/5910163][元宇宙的基礎能源竟然是它？]]
- [[https://news.cnyes.com/news/id/4723707][全面分析元宇宙特點、應用場景與價值潛力]]
- [[https://tw.stock.yahoo.com/news/%E5%8D%80%E5%A1%8A%E9%8F%88%E3%80%81nft%E5%92%8C%E5%85%83%E5%AE%87%E5%AE%99%EF%BC%9A%E8%9E%8D%E5%90%88%E7%9A%84%E6%8A%80%E8%A1%93%E8%88%87%E8%99%9B%E7%84%A1%E7%B8%B9%E7%B7%B2%E7%9A%84%E6%9C%AA%E4%BE%86-030208751.html][區塊鏈、NFT和元宇宙：融合的技術與虛無縹緲的未來]]
- [[https://news.sina.com.tw/article/20211108/40509992.html][元宇宙︱創世紀：技術基礎與驅動因素]]
- [[https://udn.com/news/story/6853/5930207][火紅元宇宙 未來商機無限！]]
- [[https://blogs.nvidia.com.tw/2021/08/10/what-is-the-metaverse/][何謂元宇宙?]]
- [[https://zh.wikipedia.org/wiki/%E5%85%83%E5%AE%87%E5%AE%99][元宇宙]]
- [[https://www.bnext.com.tw/article/67217/hand-shaken-drink--year-end-bonus][大家一直在講「元宇宙」，那到底怎麼進去？門票哪裏買？]]
* 資料表示、處理及分析
** code for showing 不同編碼
電腦的發明以來雖然解決了我們生活中大小事務，然而其本質工作始終只有一個：處理資料。而所謂資料處理（Data Processing）涉及兩個最基本的問題：
- 如何儲存資料？
- 如何對資料進行運算？
  #+begin_src python -r -n :results output :exports both
# -*- coding: utf-8 -*-
cstring = u'資訊科技ABC'

for x in cstring:
    big5Code = str(x.encode('big5','ignore'))[2:-1].replace(r'\x','').zfill(4).upper()
    hexCode = str(hex(ord(x))[2:]).upper()
    binCode = str(bin(ord(x))[2:].zfill(16))
    binCode = " ".join([binCode[::-1][i:i+8] for i in range(0, len(binCode), 8)])[::-1]
    print('{0:2}\tbig5: {1:4}\tUnicode: {2:4} ({3})'.format(x, big5Code, hexCode, binCode))

  #+end_src

  #+RESULTS:
  : 資 	big5: B8EA	Unicode: 8CC7 (10001100 11000111)
  : 訊 	big5: 0B0T	Unicode: 8A0A (10001010 00001010)
  : 科 	big5: ACEC	Unicode: 79D1 (01111001 11010001)
  : 技 	big5: A7DE	Unicode: 6280 (01100010 10000000)
  : A 	big5: 000A	Unicode: 41   (00000000 01000001)
  : B 	big5: 000B	Unicode: 42   (00000000 01000010)
  : C 	big5: 000C	Unicode: 43   (00000000 01000011)
** 資料表示與資料處理
- [[https://python.ez2learn.com/basic/unicode.html][瞭解Unicode¶]]
** 巨量資料
- [[https://zh.wikipedia.org/wiki/%E5%A4%A7%E6%95%B8%E6%93%9A][巨量資料]]
- [[https://techjury.net/blog/how-much-data-is-created-every-day/#gref][How Much Data Is Created Every Day in 2021?]]
- [[https://datafloq-com.translate.goog/read/big-data-history/?_x_tr_sl=auto&_x_tr_tl=zh-TW&_x_tr_hl=zh-TW][大數據簡史]]
- [[https://www-bigdataframework-org.translate.goog/short-history-of-big-data/?_x_tr_sl=auto&_x_tr_tl=zh-TW&_x_tr_hl=zh-TW][大數據從何而來？]]
- [[https://www.oracle.com/tw/big-data/what-is-big-data/][什麼是大數據？]]
- [[https://blog.tibame.com/?p=1752][10分鐘弄懂大數據框架Hadoop和Spark的差異]]
- [[https://www-bbva-com.translate.goog/en/five-vs-big-data/?_x_tr_sl=auto&_x_tr_tl=zh-TW&_x_tr_hl=zh-TW][數量、速度、多樣性、準確性和價值是使大數據成為一項巨大業務的五個關鍵。]]
- [[https://powerbi.microsoft.com/zh-tw/][PowerBI]]
- [[https://www.finereport.com/tw/products/imax][FineReport]]
- [[https://allaboutdataanalysis.medium.com/6%E5%A4%A7%E9%A1%9E14%E6%AC%BE%E8%B3%87%E6%96%99%E8%A6%96%E8%A6%BA%E5%8C%96%E5%B7%A5%E5%85%B7-%E5%AD%B8%E6%9C%83%E5%85%B6%E4%B8%AD2%E5%80%8B%E5%B0%B1%E5%A4%A0%E4%BA%86-b89e36ef7c3f][6大類14款資料視覺化工具，學會其中2個就夠了！]]
- [[https://digitalpr.tw/%E5%A4%A7%E6%95%B8%E6%93%9A%E5%88%86%E6%9E%90/][【大數據分析懶人包】]]
- [[https://kknews.cc/zh-tw/tech/ekx9v54.html][解析｜大數據公司挖掘數據價值的49個典型案例（值得收藏）]]
- [[https://www.zymseo.com/big5/dashuju_269726][生活中大數據分析案例]]
- [[https://www.cio.com.tw/six-data-analysis-successful-cases-completely-decrypted/][六個資料分析成功案例完全解密]]
- [[https://www.largitdata.com/blog_detail/20190725][大數據是什麼？從零開始，認識大數據定義、分析與工具]]
- [[https://en-m-wikipedia-org.translate.goog/wiki/John_Mashey?_x_tr_sl=auto&_x_tr_tl=zh-TW&_x_tr_hl=zh-TW][約翰·馬希]]
- [[https://www.kdnuggets.com/2017/02/origins-big-data.html][The Origins of Big Data]]
- [[https://www.ibm.com/blogs/watson-health/the-5-vs-of-big-data/][The 5 V’s of big data]]
- [[https://www.largitdata.com/blog_detail/20190725][大數據是什麼？從零開始，認識大數據定義、分析與工具]]
- [[https://www.quora.com/How-big-is-Youtube-storage-how-many-tera-are-uploaded-daily-and-how-can-they-Dimension-such-system][How big is Youtube storage, how many tera are uploaded daily, and how can they Dimension such system?]]
- [[https://zh.wikipedia.org/zh-tw/Bigtable][Bigtable]]
- [[https://www.zymseo.com/big5/dashuju_209929][大數據的5v特點ibm提出包括]]
- [[https://www-ibm-com.translate.goog/blogs/watson-health/the-5-vs-of-big-data/?_x_tr_sl=auto&_x_tr_tl=zh-TW&_x_tr_hl=zh-TW][大數據的5V]]
- [[https://www-bbva-com.translate.goog/en/five-vs-big-data/?_x_tr_sl=auto&_x_tr_tl=zh-TW&_x_tr_hl=zh-TW][The five V’s of big data]]
- [[https://seedscientific-com.translate.goog/how-much-data-is-created-every-day/?_x_tr_sl=auto&_x_tr_tl=zh-TW&_x_tr_hl=zh-TW][每天創建多少數據？[27個驚人的統計數據]]]
- [[https://www.quora.com/How-big-is-Youtube-storage-how-many-tera-are-uploaded-daily-and-how-can-they-Dimension-such-system][How big is Youtube storage, how many tera are uploaded daily, and how can they Dimension such system?]]
- [[https://techcrunch-com.translate.goog/2012/08/22/how-big-is-facebooks-data-2-5-billion-pieces-of-content-and-500-terabytes-ingested-every-day/?_x_tr_sl=auto&_x_tr_tl=zh-TW&_x_tr_hl=zh-TW][Facebook 的數據有多大？每天攝取 25 億條內容和超過 500 TB 的數據]]
- [[https://www-scaleyourapp-com.translate.goog/google-database-how-do-google-services-store-petabyte-exabyte-scale-data/?_x_tr_sl=auto&_x_tr_tl=zh-TW&_x_tr_hl=zh-TW][Google 數據庫：Google 服務如何存儲 PB-Exabyte 規模的數據？]]
- [[https://bigdata.nccu.edu.tw/t/topic/76][你還不懂大數據嗎？先來閱讀這篇：「一次搞懂大數據」]]GOOD
- [[https://www.inside.com.tw/article/4356-big-data-1-origin-and-4vs#fn:2][巨量資料的時代，用「大、快、雜、疑」四字箴言帶你認識大數據]]
- [[https://www.easyatm.com.tw/wiki/%E5%85%AB%E7%A7%92%E5%AE%9A%E5%BE%8B][八秒定律]]
- [[https://scitechvista.nat.gov.tw/Article/C000003/detail?ID=b58e6ad7-d4ab-4d14-b05b-0042f1f15cd4][空汙紫爆有多紫？讓「巨量資料視覺化」告訴你]]
- [[https://scitechvista.nat.gov.tw/Article/C000003/detail?ID=fbed4b93-b08a-45cf-bc93-77411a6814e8][巨量資料分析來助力 降低空污對人體的危害]]
- [[https://transbiz.com.tw/amazon-big-data/][在你下單前就出貨！Amazon用大數據鞏固電商龍頭]]
- [[https://scitechvista.nat.gov.tw/Article/C000003/detail?ID=8ee2ef72-31a1-4357-a4c8-f546287fc212][科技新寵兒–巨量資料分析]]
- [[https://scitechvista.nat.gov.tw/Article/C000003/detail?ID=14df1e2a-e393-44b1-a7e7-34e2a8732946][雲端儲存（三）：把資料拆開放?雲端分散式儲存系統]]: HDFS
- [[https://www.internetlivestats.com/][https://www.internetlivestats.com/]] 網路即時統計資訊，有用
- [[https://scitechvista.nat.gov.tw/Article/C000003/detail?ID=2a3096b4-e5c1-4e74-a1ae-975309605277][雲端儲存（六）：從資料雲海看穿你的心！雲端與海量資料分析]]：有許多應用範例
- [[https://scitechvista.nat.gov.tw/Article/C000003/detail?ID=26080eaf-4d39-4fd1-bb93-2f40ef4a4294][巨量資料協助預防疲勞駕駛]]
- [[https://datafloq-com.translate.goog/read/big-data-history/?_x_tr_sl=auto&_x_tr_tl=zh-TW&_x_tr_hl=zh-TW][大數據簡史]]
- [[https://www-forbes-com.translate.goog/sites/bernardmarr/2016/02/12/big-data-35-brilliant-and-free-data-sources-for-2016/?sh=6fdda40eb54d&_x_tr_sl=auto&_x_tr_tl=zh-TW&_x_tr_hl=zh-TW][大數據：任何人都可以使用的 33 個出色且免費的數據源]]
- [[https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwiVubK_5cn1AhXSJKYKHeRwALgQtwJ6BAgJEAI&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DhVBpG5-gNVQ&usg=AOvVaw07UZvLfVlomOq_JJcQfDnX][Add a Node to a Live Hadoop Cluster in 15 Minutes - YouTube]]
- [[https://www-geeksforgeeks-org.translate.goog/data-preprocessing-in-data-mining/?_x_tr_sl=auto&_x_tr_tl=zh-TW&_x_tr_hl=zh-TW][數據挖掘中的數據預處理]]
- [[https://www.itread01.com/content/1548606798.html][資料探勘-資料預處理模組]]
- [[https://www-knowledgehut-com.translate.goog/blog/big-data/5-best-data-processing-frameworks?_x_tr_sl=auto&_x_tr_tl=zh-TW&_x_tr_hl=zh-TW][5 個最佳數據處理框架]]
- [[https://ithelp.ithome.com.tw/articles/10194895][Apache Spark 簡介]]
- [[https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98][資料探勘]]
- [[https://www.metron.energy/blog/interview-data-science-industry/][How do you define Data Science? ]]
- [[https://www-metron-energy.translate.goog/blog/interview-data-science-industry/?_x_tr_sl=auto&_x_tr_tl=zh-TW&_x_tr_hl=zh-TW][[採訪]了解數據科學在工業中的作用]]
- [[https://ithelp.ithome.com.tw/articles/10184905][ 資料科學的思考流程 ]]
- [[https://youtu.be/6F29XLEZCXc][TED：資料視覺化的美麗]]
- [[https://treehousetechgroup-com.translate.goog/the-psychology-behind-data-visualization/?_x_tr_sl=auto&_x_tr_tl=zh-TW&_x_tr_hl=zh-TW][數據可視化背後的心理學]]
- [[https://gijn-org.translate.goog/2020/11/24/my-favorite-tools-alberto-cairo-on-data-visualization/?_x_tr_sl=auto&_x_tr_tl=zh-TW&_x_tr_hl=zh-TW][我最喜歡的工具：關於數據可視化的 Alberto Cairo]]
- [[https://www-dimins-com.translate.goog/blog/2020/02/13/5-ways-get-more-data-visualization/?_x_tr_sl=auto&_x_tr_tl=zh-TW&_x_tr_hl=zh-TW][從數據可視化中獲得更多收益的 5 種方法]]
- [[https://scitechvista.nat.gov.tw/Article/C000003/detail?ID=b58e6ad7-d4ab-4d14-b05b-0042f1f15cd4][空汙紫爆有多紫？讓「巨量資料視覺化」告訴你]]
- [[https://blog-dataiku-com.translate.goog/2019/07/04/fundamental-steps-data-project-success?_x_tr_sl=auto&_x_tr_tl=zh-TW&_x_tr_hl=zh-TW][ 完成數據分析項目的 7 個基本步驟 ]]
- [[https://dzone-com.translate.goog/articles/how-to-manage-a-data-science-project-for-successfu?_x_tr_sl=auto&_x_tr_tl=zh-TW&_x_tr_hl=zh-TW][如何管理數據科學項目以實現成功交付]]
- [[https://www-altexsoft-com.translate.goog/blog/big-data-analytics-explained/?_x_tr_sl=auto&_x_tr_tl=zh-TW&_x_tr_hl=zh-TW][大數據分析：工作原理、工具和實際應用]]
- [[https://allaboutdataanalysis.medium.com/6%E5%A4%A7%E9%A1%9E14%E6%AC%BE%E8%B3%87%E6%96%99%E8%A6%96%E8%A6%BA%E5%8C%96%E5%B7%A5%E5%85%B7-%E5%AD%B8%E6%9C%83%E5%85%B6%E4%B8%AD2%E5%80%8B%E5%B0%B1%E5%A4%A0%E4%BA%86-b89e36ef7c3f][6大類14款資料視覺化工具，學會其中2個就夠了！]]
- [[https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96][資料視覺化]]
- [[https://payu-in.translate.goog/blog/the-big-6-steps-of-big-data-explained/?_x_tr_sl=auto&_x_tr_tl=zh-TW&_x_tr_hl=zh-TW][大數據的六大步驟解釋]]
- [[https://ithelp.ithome.com.tw/articles/10184905][ 資料科學的思考流程 ]]
- [[https://readata.org/tag/big-data/][Big data 的三種資料分析類型]]≈
- [[https://bigdatafinance.tw/index.php/tech/methodology/193-r-python][數據科學界華山論劍：R與Python巔峰對決]]
- [[https://scitechvista.nat.gov.tw/Article/C000003/detail?ID=47188af8-d875-431c-bbbc-1742e5e7e4a6#maincontent][大數據專題報導（一）：資料科學如何解決真實世界的問題？認識資料極限，打開分析視野－專訪DSP智庫驅動知識長謝宗震]] :統計與資料科學的探討
- [[https://itw01.com/25BLWE5.html][經驗貼:如何進行大資料入門級學習]] : 書單參考，學習資料科學必備書單
- [[https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/565079/][淺談資料探勘與機器學習]]
- [[https://www-oreilly-com.translate.goog/radar/lessons-learned-turning-machine-learning-models-into-real-products-and-services/?_x_tr_sl=auto&_x_tr_tl=zh-TW&_x_tr_hl=zh-TW][將機器學習模型轉化為真實產品和服務的經驗教訓]]: 實務應用的經驗談
- [[https://towardsdatascience.com/5-steps-of-a-data-science-project-lifecycle-26c50372b492][5 Steps of a Data Science Project Lifecycle]] OSEMN framework
- [[https://edge.aif.tw/from-model-to-product/][有了模型然後呢？從資料模型到數據產品]]
- [[https://www.zymseo.com/big5/dashuju_269726][生活中大數據分析案例]]
- [[https://www.foodnext.net/news/industry/paper/5975647333][產品和服務決策都靠它！便利商店用大數據更貼近你的需求]]
- [[http://dgnet.com.tw/articleview.php?product_id=1600&issue_id=5282&article_id=26676][大據怎麼做？唯快不破]]
- [[https://fc.bnext.com.tw/articles/view/879][亞馬遜的大數據之戰！這次它要買下你口袋裡的發票]]
- [[https://zh.wikipedia.org/wiki/%E5%8D%94%E5%90%8C%E9%81%8E%E6%BF%BE][協同過濾]]
- [[https://innoservice.org/4238/%E5%88%A9%E7%94%A8%E5%A4%A7%E6%95%B8%E6%93%9A%E8%A8%AD%E8%A8%88%E6%9C%80%E9%80%9F%E9%85%8D%E9%80%81-%E5%82%AC%E7%94%9F%E5%87%BAamazon%E3%80%8C%E9%A0%90%E6%B8%AC%E5%BC%8F%E8%B3%BC%E7%89%A9%E3%80%8D/][大數據最速配送傳說 Amazon設計出「預測式購物」]]
- [[https://scitechvista.nat.gov.tw/Article/C000003/detail?ID=2a3096b4-e5c1-4e74-a1ae-975309605277][雲端儲存（六）：從資料雲海看穿你的心！雲端與海量資料分析]]
- [[https://themarkup-org.translate.goog/ask-the-markup/2020/08/20/does-predictive-police-technology-contribute-to-bias?_x_tr_sl=auto&_x_tr_tl=zh-TW&_x_tr_hl=zh-TW][以數據為依據的預測性警務被認為偏見較少。是嗎？]]
- [[https://themarkup.org/ask-the-markup/2020/08/20/does-predictive-police-technology-contribute-to-bias][Data-Informed Predictive Policing Was Heralded As Less Biased. Is It?]]
- [[https://www-smithsonianmag-com.translate.goog/innovation/artificial-intelligence-is-now-used-predict-crime-is-it-biased-180968337/?_x_tr_sl=auto&_x_tr_tl=zh-TW&_x_tr_hl=zh-TW][人工智能現在用於預測犯罪。但它有偏見嗎？]]
- [[https://www.zymseo.com/big5/dashuju_269726][生活中大數據分析案例]]
x- [[https://kknews.cc/zh-tw/tech/ekx9v54.html][解析｜大數據公司挖掘數據價值的49個典型案例（值得收藏）]]
- [[https://digimkt.com.tw/digital_marketing/%E5%A4%A7%E6%95%B8%E6%93%9A%E6%87%89%E7%94%A8/][大數據應用案例：最會利用數據分析的4個企業]]
- [[http://www.tabf.org.tw/Research/ExecutiveReport/pdf/vol.2/Report-vol.2-1.pdf][巨量資料(Big Data)於銀行業之應用與其成效]]
- [[http://hk.noobyard.com/article/p-fwnttjhd-gh.html][大數據公司挖掘數據價值的49個典型案例（值得收藏）]]
- [[https://www.cw.com.tw/index.php/article/5073895][用大數據和癌症搏鬥，美國新創公司獲58億投資]]
- [[https://www.cs.pu.edu.tw/~thesis/1031-html/big%20data.pdf][巨量資料機會與挑戰]]: 淘寶網上線商品約 10億，註冊用戶將近5億，單日流量20億人次，為全球最大的網路購物平台，每天從 1.5 PB 資料中分析出 20 TB 的統計結果
- [[https://www.most.gov.tw/most/attachments/1de40480-0ae3-4a84-b353-933d01c48d8c][巨量資料相關應用的規範省思]]
- [[https://highscope.ch.ntu.edu.tw/wordpress/?p=80642][挺住巨量資料防洩密]]
- [[https://www.thenewslens.com/article/96901/page2][從史諾登到臉書個資外洩，大數據時代的隱私困境與規範難題]]
- [[https://www.thinkingtaiwan.com/content/3603][張善政沒說的事：大數據、巨量資料平台，然後呢？]]
** 人工智慧的概念、發展與應用領域
- [[http://information.cpshs.hcc.edu.tw/leson/%E9%9B%BB%E5%AD%B8%E6%AD%B7%E5%8F%B2%E5%90%8D%E4%BA%BA/new_page_8.htm][何謂人工智慧]]
- [[https://ictjournal.itri.org.tw/Content/Messagess/contents.aspx?&MmmID=654304432122064271&MSID=1072341652776363373][邁向2030，展望AI科技發展未來藍圖]]
- [[https://pansci.asia/archives/81382][不可思議的大腦－《知識大圖解》]]:大腦運作原理以及神經形態晶片（neuromorphic chip）
- [[https://ithelp.ithome.com.tw/articles/10216799][ 感知器(Perception)-ML簡史 ]]
- [[https://kknews.cc/tech/e6zx5ay.html][火爐煉AI」深度學習001-神經網絡的基本單元-感知器]]
- [[https://chtseng.wordpress.com/2017/07/24/neural-networks-%E4%B8%80/][Neural Networks (一)]]
- [[https://www.stockfeel.com.tw/%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92%E7%9A%84%E8%A1%B0%E9%A0%B9%E8%88%88%E7%9B%9B%EF%BC%9A%E5%BE%9E%E9%A1%9E%E7%A5%9E%E7%B6%93%E7%B6%B2%E8%B7%AF%E5%88%B0%E6%B7%BA%E5%B1%A4%E5%AD%B8%E7%BF%92/][機器學習的衰頹興盛：從類神經網路到淺層學習]]
- [[https://www.commonhealth.com.tw/article/85684][新冠肺炎症狀比較表》Delta、Omicron症狀跟感冒怎麼分？]]
- [[https://www.ee.cityu.edu.hk/~gchen/pdf/PerceptronT.pdf][人工智能感知器]]: PDF，介紹Rosenblatt的感知器
- [[https://today.line.me/tw/v2/article/39Klvo][ 【二戰解密英雄】破解納粹密碼　人工智慧之父圖靈躍上英鎊50元新鈔 ]]
- [[https://sitn-hms-harvard-edu.translate.goog/flash/2017/history-artificial-intelligence/?_x_tr_sl=auto&_x_tr_tl=zh-TW&_x_tr_hl=zh-TW][人工智能的歷史]]
- [[https://zh.wikipedia.org/wiki/%E7%AC%AC%E4%BA%94%E4%BB%A3%E9%9B%BB%E8%85%A6][第五代電腦]]
- [[https://www.gushiciku.cn/pl/2hUw/zh-tw][一場失敗的“AI革命”]]
- [[https://kknews.cc/zh-tw/tech/z5qnr4p.html][一文搞懂 CPU、GPU 和 TPU]]
** 機器學習
*** Links
- [[https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/565079/][淺談資料探勘與機器學習]]
- [[https://ppfocus.com/0/edcb10eaa.html][從「機器兒童」到「機器學習」:「學習」的概念是如何變化的?]]
- [[https://www.ecloudvalley.com/zh-hant/machine-learning/][你知道機器學習(Machine Learning)，有幾種學習方式嗎?]]
- [[https://www.terasoft.com.tw/support/tech_articles/reinforcement_learning_a_brief_guide.asp][強化學習(Reinforcement Learning)：入門指南]]
- [[https://axk51013.medium.com/%E4%B8%8D%E8%A6%81%E5%86%8D%E7%94%A8k-means-%E8%B6%85%E5%AF%A6%E7%94%A8%E5%88%86%E7%BE%A4%E6%B3%95dbscan%E8%A9%B3%E8%A7%A3-a33fa287c0e][不要再用K-means！ 超實用分群法DBSCAN詳解]]
- [[http://ben-do.github.io/2016/08/20/Three-Shortcomings-of-K-means/][ 使用k-means分群的三個缺點 ]]
- [[https://passintotheiris.blogspot.com/2019/12/ml-clustering_12.html][ML | 群集分析 Clustering 其二 ]]
- [[https://www.geeksforgeeks.org/dbscan-clustering-in-ml-density-based-clustering/][DBSCAN Clustering in ML | Density based clustering]]
- [[http://yltang.net/tutorial/dsml/14/][第 14 章    非監督式學習]]
- [[https://www.ibm.com/tw-zh/cloud/learn/neural-networks][神經網路]]
- [[https://www.stockfeel.com.tw/%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92%E7%9A%84%E8%A1%B0%E9%A0%B9%E8%88%88%E7%9B%9B%EF%BC%9A%E5%BE%9E%E9%A1%9E%E7%A5%9E%E7%B6%93%E7%B6%B2%E8%B7%AF%E5%88%B0%E6%B7%BA%E5%B1%A4%E5%AD%B8%E7%BF%92/][機器學習的衰頹興盛：從類神經網路到淺層學習]]
- [[https://www.inside.com.tw/feature/ai/9854-ai-history][人工智慧：如何以電腦解決問題]]
- [[https://www.inside.com.tw/feature/ai/9854-ai-history][第一次人工智慧泡沫後，研究領域轉為「機器學習」]]: 非常清楚
- [[https://buzzorange.com/techorange/2019/05/02/difference-between-statistics-and-machine-learning/][機器學習跟統計學差在哪？哈佛博士：機器學習重視預測結果，統計學在乎因果推理]]
- [[https://group.dailyview.tw/article/detail/434][再過幾年就不需要人類了？AI人工智慧發展比你想像中還廣！]]
- 
- [[https://pearl.archives.gov.tw/UserFiles/Publish/FCKImages/File/study/05.qxd.pdf][資料探勘的技術與應用]]
*** 監督式學習:最短距離法
**** #0
#+begin_src python -r -n :results output :exports both
import numpy as np
import matplotlib.pyplot as plt

cats = np.array([[1, 9], [2, 6], [3, 5], [4, 8]])
dogs = np.array([[6, 3], [7, 6], [8, 8], [9, 4]])
cc = cats.mean(axis=0).transpose()
dc = dogs.mean(axis=0).transpose()
nn = np.array([[5],[6]])
print(cc)
print(dc)
cats = cats.transpose()
dogs = dogs.transpose()
plt.rcParams['font.sans-serif'] = ['Arial Unicode MS']
plt.rcParams['axes.unicode_minus'] = False

size = 300
plt.xlim(0, 10)
plt.ylim(0, 10)
plt.xticks(np.arange(0, 11, 1))
plt.xlabel('特徵值1')
plt.ylabel('特徵值2')
plt.yticks(np.arange(0, 11, 1))

#plt.scatter(cats[0], cats[1],
#            color='green', marker='o', s=size, zorder=2)
#plt.scatter(dogs[0], dogs[1],
#            color='orange', marker='s', s=size, zorder=2)
#plt.scatter(cc[0], cc[1],
#            color='green', marker='*', s=size, zorder=2)
#plt.scatter(dc[0], dc[1],
#            color='orange', marker='*', s=size, zorder=2)
#plt.scatter(nn[0], nn[1],
#            color='red', marker='^', s=size, zorder=2)
# 新圖與貓
#lx1 = [cc[0], nn[0]]
#ly1 = [cc[1], nn[1]]
#plt.plot(lx1, ly1, '--', color='green')
# 新圖與狗
#lx1 = [dc[0], nn[0]]
#ly1 = [dc[1], nn[1]]
#plt.plot(lx1, ly1, '--', color='orange')
#for x,y  in zip(cats[0], cats[1]):
#    label = "貓({0},{1})".format(x,y)
#    plt.annotate(label, (x,y), textcoords="offset points", xytext=(0,10), ha='center')
#for x,y  in zip(dogs[0], dogs[1]):
#    label = "狗({0},{1})".format(x,y)
#    plt.annotate(label, (x,y), textcoords="offset points", xytext=(0,10), ha='center')
##狗的中心點
#x, y = dc[0], dc[1]
#label = "中心點({0},{1})".format(x, y)
#plt.annotate(label, (x,y), textcoords="offset points", xytext=(30,10), ha='center')
##貓的中心點
#x, y = cc[0], cc[1]
#label = "中心點({0},{1})".format(x, y)
#plt.annotate(label, (x,y), textcoords="offset points", xytext=(10,10), ha='center')
##新圖點
#x, y = nn[0][0], nn[1][0]
#print(x, y)
#label = "？({0},{1})".format(x, y)
#plt.annotate(label, (x,y), textcoords="offset points", xytext=(0,10), ha='center')
#print(np.sqrt(np.square(nn[0][0]-cc[0])+np.square(nn[1][0]-cc[1])))
#print(np.sqrt(np.square(nn[0][0]-dc[0])+np.square(nn[1][0]-dc[1])))

plt.grid()
plt.savefig('images/empty.png', dpi=300)
#+end_src
#+RESULTS:
: [2.5 7. ]
: [7.5  5.25]
#+CAPTION: Caption
#+LABEL:fig:EmptyGrid
#+name: fig:EmptyGrid
#+ATTR_LATEX: :width 500
#+ATTR_ORG: :width 500
#+ATTR_HTML: :width 500
[[file:images/empty.png]]
**** #1
#+begin_src python -r -n :results output :exports both
import numpy as np
import matplotlib.pyplot as plt

cats = np.array([[1, 9], [2, 6], [3, 5], [4, 8]])
dogs = np.array([[6, 3], [7, 6], [8, 8], [9, 4]])
cc = cats.mean(axis=0).transpose()
dc = dogs.mean(axis=0).transpose()
nn = np.array([[5],[6]])
print(cc)
print(dc)
cats = cats.transpose()
dogs = dogs.transpose()
plt.rcParams['font.sans-serif'] = ['Arial Unicode MS']
plt.rcParams['axes.unicode_minus'] = False

size = 300
plt.xlim(0, 10)
plt.ylim(0, 10)
plt.xticks(np.arange(0, 11, 1))
plt.xlabel('特徵值1')
plt.ylabel('特徵值2')
plt.yticks(np.arange(0, 11, 1))

plt.scatter(cats[0], cats[1],
            color='green', marker='o', s=size, zorder=2)
plt.scatter(dogs[0], dogs[1],
            color='orange', marker='s', s=size, zorder=2)
#plt.scatter(cc[0], cc[1],
#            color='green', marker='*', s=size, zorder=2)
#plt.scatter(dc[0], dc[1],
#            color='orange', marker='*', s=size, zorder=2)
#plt.scatter(nn[0], nn[1],
#            color='red', marker='^', s=size, zorder=2)
# 新圖與貓
#lx1 = [cc[0], nn[0]]
#ly1 = [cc[1], nn[1]]
#plt.plot(lx1, ly1, '--', color='green')
# 新圖與狗
#lx1 = [dc[0], nn[0]]
#ly1 = [dc[1], nn[1]]
#plt.plot(lx1, ly1, '--', color='orange')
for x,y  in zip(cats[0], cats[1]):
    label = "貓({0},{1})".format(x,y)
    plt.annotate(label, (x,y), textcoords="offset points", xytext=(0,10), ha='center')
for x,y  in zip(dogs[0], dogs[1]):
    label = "狗({0},{1})".format(x,y)
    plt.annotate(label, (x,y), textcoords="offset points", xytext=(0,10), ha='center')
##狗的中心點
#x, y = dc[0], dc[1]
#label = "中心點({0},{1})".format(x, y)
#plt.annotate(label, (x,y), textcoords="offset points", xytext=(30,10), ha='center')
##貓的中心點
#x, y = cc[0], cc[1]
#label = "中心點({0},{1})".format(x, y)
#plt.annotate(label, (x,y), textcoords="offset points", xytext=(10,10), ha='center')
##新圖點
#x, y = nn[0][0], nn[1][0]
#print(x, y)
#label = "？({0},{1})".format(x, y)
#plt.annotate(label, (x,y), textcoords="offset points", xytext=(0,10), ha='center')
print(np.sqrt(np.square(nn[0][0]-cc[0])+np.square(nn[1][0]-cc[1])))
print(np.sqrt(np.square(nn[0][0]-dc[0])+np.square(nn[1][0]-dc[1])))

plt.grid()
plt.savefig('images/sd0.png', dpi=300)
#+end_src
#+RESULTS:
: [2.5 7. ]
: [7.5  5.25]
: 2.692582403567252
: 2.6100766272276377
#+CAPTION: Caption
#+LABEL:fig:InitialCondition
#+name: fig:InitialCondition
#+ATTR_LATEX: :width 500
#+ATTR_ORG: :width 500
#+ATTR_HTML: :width 500
[[file:images/sd0.png]]
**** #2
#+begin_src python -r -n :results output :exports both
import numpy as np
import matplotlib.pyplot as plt

cats = np.array([[1, 9], [2, 6], [3, 5], [4, 8]])
dogs = np.array([[6, 3], [7, 6], [8, 8], [9, 4]])
cc = cats.mean(axis=0).transpose()
dc = dogs.mean(axis=0).transpose()
nn = np.array([[5],[6]])
print(cc)
print(dc)
cats = cats.transpose()
dogs = dogs.transpose()
plt.rcParams['font.sans-serif'] = ['Arial Unicode MS']
plt.rcParams['axes.unicode_minus'] = False

size = 300
plt.xlim(0, 10)
plt.ylim(0, 10)
plt.xticks(np.arange(0, 11, 1))
plt.xlabel('特徵值1')
plt.ylabel('特徵值2')
plt.yticks(np.arange(0, 11, 1))

plt.scatter(cats[0], cats[1],
            color='green', marker='o', s=size, zorder=2)
plt.scatter(dogs[0], dogs[1],
            color='orange', marker='s', s=size, zorder=2)
plt.scatter(cc[0], cc[1],
            color='green', marker='*', s=size, zorder=2)
plt.scatter(dc[0], dc[1],
            color='orange', marker='*', s=size, zorder=2)
plt.scatter(nn[0], nn[1],
            color='red', marker='^', s=size, zorder=2)
# 新圖與貓
lx1 = [cc[0], nn[0]]
ly1 = [cc[1], nn[1]]
plt.plot(lx1, ly1, '--', color='green')
# 新圖與狗
lx1 = [dc[0], nn[0]]
ly1 = [dc[1], nn[1]]
plt.plot(lx1, ly1, '--', color='orange')
for x,y  in zip(cats[0], cats[1]):
    label = "貓({0},{1})".format(x,y)
    plt.annotate(label, (x,y), textcoords="offset points", xytext=(0,10), ha='center')
for x,y  in zip(dogs[0], dogs[1]):
    label = "狗({0},{1})".format(x,y)
    plt.annotate(label, (x,y), textcoords="offset points", xytext=(0,10), ha='center')
#狗的中心點
x, y = dc[0], dc[1]
label = "中心點({0},{1})".format(x, y)
plt.annotate(label, (x,y), textcoords="offset points", xytext=(30,10), ha='center')
#貓的中心點
x, y = cc[0], cc[1]
label = "中心點({0},{1})".format(x, y)
plt.annotate(label, (x,y), textcoords="offset points", xytext=(10,10), ha='center')
#新圖點
x, y = nn[0][0], nn[1][0]
print(x, y)
label = "？({0},{1})".format(x, y)
plt.annotate(label, (x,y), textcoords="offset points", xytext=(0,10), ha='center')
print(np.sqrt(np.square(nn[0][0]-cc[0])+np.square(nn[1][0]-cc[1])))
print(np.sqrt(np.square(nn[0][0]-dc[0])+np.square(nn[1][0]-dc[1])))

plt.grid()
plt.savefig('images/sd.png', dpi=300)
#+end_src
#+RESULTS:
: [2.5 7. ]
: [7.5  5.25]
: 5 6
: 2.692582403567252
: 2.6100766272276377
#+CAPTION: Caption
#+LABEL:fig:SecondStep
#+name: fig:SecondStep
#+ATTR_LATEX: :width 500
#+ATTR_ORG: :width 500
#+ATTR_HTML: :width 500
[[file:images/sd.png]]
*** 非監督式學習:K-means
**** 1.
#+begin_src python -r -n :results output :exports both
import numpy as np
import matplotlib.pyplot as plt

cats = np.array([[1, 9], [2, 6], [3, 5], [4, 8]])
dogs = np.array([[6, 3], [7, 6], [8, 8], [9, 4]])
cc = cats.mean(axis=0).transpose()
dc = dogs.mean(axis=0).transpose()
nn = np.array([[5],[6]])
print(cc)
print(dc)
cats = cats.transpose()
dogs = dogs.transpose()
plt.rcParams['font.sans-serif'] = ['Arial Unicode MS']
plt.rcParams['axes.unicode_minus'] = False

size = 300
plt.xlim(0, 10)
plt.ylim(0, 10)
plt.xticks(np.arange(0, 11, 1))
plt.xlabel('特徵值1')
plt.ylabel('特徵值2')
plt.yticks(np.arange(0, 11, 1))

plt.scatter(cats[0], cats[1],
            color='#29c4bd', marker='o', s=size, zorder=2)
plt.scatter(dogs[0], dogs[1],
            color='#29c4bd', marker='o', s=size, zorder=2)
#挑中心點
#plt.scatter(cc[0], cc[1],
#            color='green', marker='*', s=size, zorder=2)
#plt.scatter(dc[0], dc[1],
#            color='orange', marker='*', s=size, zorder=2)

# 新圖與貓
#lx1 = [cc[0], nn[0]]
#ly1 = [cc[1], nn[1]]
#plt.plot(lx1, ly1, '--', color='green')
# 新圖與狗
#lx1 = [dc[0], nn[0]]
#ly1 = [dc[1], nn[1]]
#plt.plot(lx1, ly1, '--', color='orange')
for x,y  in zip(cats[0], cats[1]):
    label = "({0},{1})".format(x,y)
    plt.annotate(label, (x,y), textcoords="offset points", xytext=(0,10), ha='center')
for x,y  in zip(dogs[0], dogs[1]):
    label = "({0},{1})".format(x,y)
    plt.annotate(label, (x,y), textcoords="offset points", xytext=(0,10), ha='center')
##狗的中心點
#x, y = dc[0], dc[1]
#label = "中心點({0},{1})".format(x, y)
#plt.annotate(label, (x,y), textcoords="offset points", xytext=(10,-20), ha='center')
##貓的中心點
#x, y = cc[0], cc[1]
#label = "中心點({0},{1})".format(x, y)
#plt.annotate(label, (x,y), textcoords="offset points", xytext=(10,-20), ha='center')
#新圖點
#x, y = nn[0][0], nn[1][0]
#print(x, y)
#label = "？({0},{1})".format(x, y)
#plt.annotate(label, (x,y), textcoords="offset points", xytext=(0,-20), ha='center')
#print(np.sqrt(np.square(nn[0][0]-cc[0])+np.square(nn[1][0]-cc[1])))
#print(np.sqrt(np.square(nn[0][0]-dc[0])+np.square(nn[1][0]-dc[1])))

plt.grid()
plt.savefig('images/sd1.png', dpi=300)
#+end_src

#+RESULTS:
: [2.5 7. ]
: [7.5  5.25]
#+CAPTION: Caption
#+LABEL:fig:Labl
#+name: fig:Name
#+ATTR_LATEX: :width 500
#+ATTR_ORG: :width 500
#+ATTR_HTML: :width 500
[[file:images/sd1.png]]
**** 2. 先畫中心點
#+begin_src python -r -n :results output :exports both
import numpy as np
import matplotlib.pyplot as plt

cats = np.array([[1, 9], [2, 6], [3, 5], [4, 8]])
dogs = np.array([[6, 3], [7, 6], [8, 8], [9, 4]])
c1 = np.array([[5],[5]])
c2 = np.array([[6],[9]])
#nn = np.array([[5],[6]])
print(c1)
print(c2)
cats = cats.transpose()
dogs = dogs.transpose()
plt.rcParams['font.sans-serif'] = ['Arial Unicode MS']
plt.rcParams['axes.unicode_minus'] = False

size = 300
plt.xlim(0, 10)
plt.ylim(0, 10)
plt.xticks(np.arange(0, 11, 1))
plt.xlabel('特徵值1')
plt.ylabel('特徵值2')
plt.yticks(np.arange(0, 11, 1))

plt.scatter(cats[0], cats[1],
            color='#29c4bd', marker='o', s=size, zorder=2)
plt.scatter(dogs[0], dogs[1],
            color='#29c4bd', marker='o', s=size, zorder=2)
#挑中心點
plt.scatter(c1[0], c1[1],
            color='green', marker='*', s=size, zorder=2)
plt.scatter(c2[0], c2[1],
            color='orange', marker='*', s=size, zorder=2)

# 新圖與貓
#lx1 = [cc[0], nn[0]]
#ly1 = [cc[1], nn[1]]
#plt.plot(lx1, ly1, '--', color='green')
# 新圖與狗
#lx1 = [dc[0], nn[0]]
#ly1 = [dc[1], nn[1]]
#plt.plot(lx1, ly1, '--', color='orange')
for x,y  in zip(cats[0], cats[1]):
    label = "({0},{1})".format(x,y)
    plt.annotate(label, (x,y), textcoords="offset points", xytext=(0,10), ha='center')
for x,y  in zip(dogs[0], dogs[1]):
    label = "({0},{1})".format(x,y)
    plt.annotate(label, (x,y), textcoords="offset points", xytext=(0,10), ha='center')
##中心點1
x, y = c1[0][0], c1[1][0]
label = "中心點1({0},{1})".format(x, y)
plt.annotate(label, (x,y), textcoords="offset points", xytext=(10,10), ha='center')
##中心點2
x, y = c2[0][0], c2[1][0]
label = "中心點2({0},{1})".format(x, y)
plt.annotate(label, (x,y), textcoords="offset points", xytext=(10,10), ha='center')
#新圖點
#x, y = nn[0][0], nn[1][0]
#print(x, y)
#label = "？({0},{1})".format(x, y)
#plt.annotate(label, (x,y), textcoords="offset points", xytext=(0,-20), ha='center')
#print(np.sqrt(np.square(nn[0][0]-cc[0])+np.square(nn[1][0]-cc[1])))
#print(np.sqrt(np.square(nn[0][0]-dc[0])+np.square(nn[1][0]-dc[1])))

plt.grid()
plt.savefig('images/sd2.png', dpi=300)
#+end_src

#+RESULTS:
: [[5]
:  [5]]
: [[6]
:  [9]]
#+CAPTION: Caption
#+LABEL:fig:Labl
#+name: fig:Name
#+ATTR_LATEX: :width 500
#+ATTR_ORG: :width 500
#+ATTR_HTML: :width 500
[[file:images/sd2.png]]
**** 3.
#+begin_src python -r -n :results output :exports both
import numpy as np
import matplotlib.pyplot as plt

cats = np.array([[1, 9], [2, 6], [3, 5], [4, 8]])
dogs = np.array([[6, 3], [7, 6], [8, 8], [9, 4]])
c1 = np.array([[5],[6]])
c2 = np.array([[6],[9]])

#nn = np.array([[5],[6]])
print(c1)
print(c2)
cats = cats.transpose()
dogs = dogs.transpose()
plt.rcParams['font.sans-serif'] = ['Arial Unicode MS']
plt.rcParams['axes.unicode_minus'] = False

size = 300
plt.xlim(0, 10)
plt.ylim(0, 10)
plt.xticks(np.arange(0, 11, 1))
plt.xlabel('特徵值1')
plt.ylabel('特徵值2')
plt.yticks(np.arange(0, 11, 1))

plt.scatter(cats[0], cats[1],
            color='#29c4bd', marker='o', s=size, zorder=2)
plt.scatter(dogs[0], dogs[1],
            color='#29c4bd', marker='o', s=size, zorder=2)
#挑中心點
plt.scatter(c1[0], c1[1],
            color='green', marker='*', s=size, zorder=2)
plt.scatter(c2[0], c2[1],
            color='orange', marker='*', s=size, zorder=2)

#計算各點與中心點1的歐幾里德，畫線
dist1 = []
c1xs, c1ys = np.repeat(c1[0],4), np.repeat(c1[1],4)
for cx, cy, x, y in zip(c1xs, c1ys, cats[0], cats[1]):
    print(cx, cy, x, y)
    dist1.append(np.sqrt(np.square(cx-x)+np.square(cy-y)))
    plt.plot([cx, x], [cy, y], '--', color='#dd99ff')
dist2 = []
c1xs, c1ys = np.repeat(c1[0],4), np.repeat(c1[1],4)
for cx, cy, x, y in zip(c1xs, c1ys, dogs[0], dogs[1]):
    print(cx, cy, x, y)
    dist2.append(np.sqrt(np.square(cx-x)+np.square(cy-y)))
    plt.plot([cx, x], [cy, y], '--', color='#dd99ff')
print('計算各點與中心點1的歐幾里德')
print('--dist1--')
for item in dist1:
    print("{0:.2f}".format(item))
print('--dist2-----')
for item in dist2:
    print("{0:.2f}".format(item))

#計算各點與中心點2的歐幾里德，畫線
dist3 = []
c1xs, c1ys = np.repeat(c2[0],4), np.repeat(c2[1],4)
for cx, cy, x, y in zip(c1xs, c1ys, cats[0], cats[1]):
    print(cx, cy, x, y)
    dist3.append(np.sqrt(np.square(cx-x)+np.square(cy-y)))
    plt.plot([cx, x], [cy, y], '--', color='#dd99ff')
dist4 = []
c1xs, c1ys = np.repeat(c2[0],4), np.repeat(c2[1],4)
for cx, cy, x, y in zip(c1xs, c1ys, dogs[0], dogs[1]):
    print(cx, cy, x, y)
    dist4.append(np.sqrt(np.square(cx-x)+np.square(cy-y)))
    plt.plot([cx, x], [cy, y], '--', color='#dd99ff')
print('計算各點與中心點2的歐幾里德')
print('--dist3--')
for item in dist3:
    print("{0:.2f}".format(item))
print('--dist4-----')
for item in dist4:
    print("{0:.2f}".format(item))





#print(np.sqrt(np.square(nn[0][0]-cc[0])+np.square(nn[1][0]-cc[1])))
#print(np.sqrt(np.square(nn[0][0]-dc[0])+np.square(nn[1][0]-dc[1])))
# 新圖與貓
#lx1 = [cc[0], nn[0]]
#ly1 = [cc[1], nn[1]]
#plt.plot(lx1, ly1, '--', color='green')
# 新圖與狗
#lx1 = [dc[0], nn[0]]
#ly1 = [dc[1], nn[1]]
#plt.plot(lx1, ly1, '--', color='orange')
for x,y  in zip(cats[0], cats[1]):
    label = "({0},{1})".format(x,y)
    plt.annotate(label, (x,y), textcoords="offset points", xytext=(0,10), ha='center')
for x,y  in zip(dogs[0], dogs[1]):
    label = "({0},{1})".format(x,y)
    plt.annotate(label, (x,y), textcoords="offset points", xytext=(0,10), ha='center')
##中心點1
x, y = c1[0][0], c1[1][0]
label = "中心點1({0},{1})".format(x, y)
plt.annotate(label, (x,y), textcoords="offset points", xytext=(10,-20), ha='center')
##中心點2
x, y = c2[0][0], c2[1][0]
label = "中心點2({0},{1})".format(x, y)
plt.annotate(label, (x,y), textcoords="offset points", xytext=(10,10), ha='center')
#新圖點
#x, y = nn[0][0], nn[1][0]
#print(x, y)
#label = "？({0},{1})".format(x, y)
#plt.annotate(label, (x,y), textcoords="offset points", xytext=(0,-20), ha='center')


plt.grid()
plt.savefig('images/sd3.png', dpi=300)
#+end_src

#+RESULTS:
#+begin_example
[[5]
 [6]]
[[6]
 [9]]
5 6 1 9
5 6 2 6
5 6 3 5
5 6 4 8
5 6 6 3
5 6 7 6
5 6 8 8
5 6 9 4
計算各點與中心點1的歐幾里德
--dist1--
5.00
3.00
2.24
2.24
--dist2-----
3.16
2.00
3.61
4.47
6 9 1 9
6 9 2 6
6 9 3 5
6 9 4 8
6 9 6 3
6 9 7 6
6 9 8 8
6 9 9 4
計算各點與中心點2的歐幾里德
--dist3--
5.00
5.00
5.00
2.24
--dist4-----
6.00
3.16
2.24
5.83
#+end_example
#+CAPTION: Caption
#+LABEL:fig:Labl
#+name: fig:Name
#+ATTR_LATEX: :width 500
#+ATTR_ORG: :width 500
#+ATTR_HTML: :width 500
[[file:images/sd3.png]]
**** 4.
#+begin_src python -r -n :results output :exports both
import numpy as np
import matplotlib.pyplot as plt

cats = np.array([[3, 5], [2, 6], [6, 3], [7, 6]])
dogs = np.array([[1, 9], [4, 8], [8, 8], [9, 4]])
c1 = cats.mean(axis=0).transpose()
c2 = dogs.mean(axis=0).transpose()
#nn = np.array([[5],[6]])

cats = cats.transpose()
dogs = dogs.transpose()
plt.rcParams['font.sans-serif'] = ['Arial Unicode MS']
plt.rcParams['axes.unicode_minus'] = False
plt.grid()
size = 300
plt.xlim(0, 10)
plt.ylim(0, 10)
plt.xticks(np.arange(0, 11, 1))
plt.xlabel('特徵值1')
plt.ylabel('特徵值2')
plt.yticks(np.arange(0, 11, 1))

plt.scatter(cats[0], cats[1],
            color='green', marker='o', s=size, zorder=2)
plt.scatter(dogs[0], dogs[1],
            color='orange', marker='o', s=size, zorder=2)
#挑中心點
plt.scatter(c1[0], c1[1],
            color='green', marker='*', s=size, zorder=2)
plt.scatter(c2[0], c2[1],
            color='orange', marker='*', s=size, zorder=2)

#計算各點與中心點1的歐幾里德，畫線
dist1 = []
c1xs, c1ys = np.repeat(c1[0],4), np.repeat(c1[1],4)
for cx, cy, x, y in zip(c1xs, c1ys, cats[0], cats[1]):
    print(cx, cy, x, y)
    dist1.append(np.sqrt(np.square(cx-x)+np.square(cy-y)))
    plt.plot([cx, x], [cy, y], '--', color='#88cf9a')
dist2 = []
c1xs, c1ys = np.repeat(c1[0],4), np.repeat(c1[1],4)
for cx, cy, x, y in zip(c1xs, c1ys, dogs[0], dogs[1]):
    print(cx, cy, x, y)
    dist2.append(np.sqrt(np.square(cx-x)+np.square(cy-y)))
    plt.plot([cx, x], [cy, y], '--', color='#88cf9a')

print('--dist1--')
for item in dist1:
    print("{0:.2f}".format(item))
print('--dist2-----')
for item in dist2:
    print("{0:.2f}".format(item))

#計算各點與中心點2的歐幾里德，畫線
dist3 = []
c1xs, c1ys = np.repeat(c2[0],4), np.repeat(c2[1],4)
for cx, cy, x, y in zip(c1xs, c1ys, cats[0], cats[1]):
    print(cx, cy, x, y)
    dist3.append(np.sqrt(np.square(cx-x)+np.square(cy-y)))
#    plt.plot([cx, x], [cy, y], '--', color='#e8c495')
dist4 = []
c1xs, c1ys = np.repeat(c2[0],4), np.repeat(c2[1],4)
for cx, cy, x, y in zip(c1xs, c1ys, dogs[0], dogs[1]):
    print(cx, cy, x, y)
    dist4.append(np.sqrt(np.square(cx-x)+np.square(cy-y)))
#    plt.plot([cx, x], [cy, y], '--', color='#e8c495')
print('--dist3--')
for item in dist3:
    print("{0:.2f}".format(item))
print('--dist4-----')
for item in dist4:
    print("{0:.2f}".format(item))





#print(np.sqrt(np.square(nn[0][0]-cc[0])+np.square(nn[1][0]-cc[1])))
#print(np.sqrt(np.square(nn[0][0]-dc[0])+np.square(nn[1][0]-dc[1])))
# 新圖與貓
#lx1 = [cc[0], nn[0]]
#ly1 = [cc[1], nn[1]]
#plt.plot(lx1, ly1, '--', color='green')
# 新圖與狗
#lx1 = [dc[0], nn[0]]
#ly1 = [dc[1], nn[1]]
#plt.plot(lx1, ly1, '--', color='orange')
for x,y  in zip(cats[0], cats[1]):
    label = "({0},{1})".format(x,y)
    plt.annotate(label, (x,y), textcoords="offset points", xytext=(0,10), ha='center')
for x,y  in zip(dogs[0], dogs[1]):
    label = "({0},{1})".format(x,y)
    plt.annotate(label, (x,y), textcoords="offset points", xytext=(0,10), ha='center')
###中心點1
print('test------')
print(np.shape(c1))
print(c1)
x, y = c1[0], c1[1]
label = "新中心點1\n({0},{1})".format(x, y)
plt.annotate(label, (x,y), textcoords="offset points", xytext=(20,10), ha='center')
###中心點2
x, y = c2[0], c2[1]
label = "新中心點2\n({0},{1})".format(x, y)
plt.annotate(label, (x,y), textcoords="offset points", xytext=(20,10), ha='center')
##新圖點
#x, y = nn[0][0], nn[1][0]
#print(x, y)
#label = "？({0},{1})".format(x, y)
#plt.annotate(label, (x,y), textcoords="offset points", xytext=(0,-20), ha='center')



plt.savefig('images/sd4.png', dpi=300)
#+end_src

#+RESULTS:
#+begin_example
4.5 5.0 3 5
4.5 5.0 2 6
4.5 5.0 6 3
4.5 5.0 7 6
4.5 5.0 1 9
4.5 5.0 4 8
4.5 5.0 8 8
4.5 5.0 9 4
--dist1--
1.50
2.69
2.50
2.69
--dist2-----
5.32
3.04
4.61
4.61
5.5 7.25 3 5
5.5 7.25 2 6
5.5 7.25 6 3
5.5 7.25 7 6
5.5 7.25 1 9
5.5 7.25 4 8
5.5 7.25 8 8
5.5 7.25 9 4
--dist3--
3.36
3.72
4.28
1.95
--dist4-----
4.83
1.68
2.61
4.78
test------
(2,)
[4.5 5. ]
#+end_example
#+CAPTION: Caption
#+LABEL:fig:Labl
#+name: fig:Name
#+ATTR_LATEX: :width 500
#+ATTR_ORG: :width 500
#+ATTR_HTML: :width 500
[[file:images/sd4.png]]
** 資料探勘
*** Links
- [[https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/565079/][淺談資料探勘與機器學習]]
- [[https://www.netadmin.com.tw/netadmin/zh-tw/technology/018708494BDF4224B26C1B1589AB7327][活用大數據資料探勘　挖掘潛藏關鍵情資]]
- [[https://www.itread01.com/content/1543487404.html][瞭解機器學習、資料探勘、人工智慧的關係]]
- [[https://pandio-com.translate.goog/blog/when-was-machine-learning-invented/?_x_tr_sl=auto&_x_tr_tl=zh-TW&_x_tr_hl=zh-TW][機器學習簡史]]
- [[https://medium.com/marketingdatascience/%E7%B5%B1%E8%A8%88%E5%AD%B8%E7%B0%A1%E5%8F%B2-75ea6b70734a][統計學簡史]]
- [[https://zh.wikipedia.org/wiki/%E7%BB%9F%E8%AE%A1%E5%AD%A6][統計學]]
- [[https://www.newton.com.tw/wiki/%E7%B5%B1%E8%A8%88%E5%AD%B8][統計學(一級學科)]]
- [[https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98#%E6%AD%B7%E5%8F%B2][資料探勘]]
- [[https://digitaltribune.com/checkers-at-the-orgins-of-ai-and-machine-learning/][Checkers at the origins of AI and Machine Learning]]
- [[https://www.netadmin.com.tw/netadmin/zh-tw/technology/018708494BDF4224B26C1B1589AB7327][活用大數據資料探勘　挖掘潛藏關鍵情資]]
- [[http://csyue.nccu.edu.tw/ch/Data%20Mining%28200910%29.pdf][資料探勘的發展與挑戰]]
- [[https://blog.tibame.com/?p=17911][【AI60問】Q20資料探勘6大主要功能與應用？]]
- [[https://huasadata.com/%E4%BB%80%E9%BA%BC%E6%98%AF%E8%B3%87%E6%96%99%E6%8E%A2%E5%8B%98data-mining%EF%BC%9F/][什麼是資料探勘(Data Mining)？]]
- [[https://www.itread01.com/content/1549712347.html][五款開源的資料探勘軟體]]
- [[https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/564855/][資料探勘函式之迴歸（regression）]]
- [[https://ithelp.ithome.com.tw/articles/10200561?sc=iThelpR][資料分析(Data Analysis) -2.分群(分類) ]]
- [[https://ithelp.ithome.com.tw/articlpes/10200795][lt.資料分析(Data Analysis) -3.迴歸 ]]
- [[https://www.itread01.com/content/1541522170.html][資料探勘——時間序列分析]]
- [[https://ithelp.ithome.com.tw/articles/10233366][時間序列簡介]]
- [[https://ithelp.ithome.com.tw/articles/10187244][資料探勘演算法 - 關聯規則]]
- [[https://www.bnext.com.tw/article/42423/a-beginners-learning-journey-to-data-science][一個門外漢的資料科學學習之旅]]
- [[https://meet.bnext.com.tw/blog/view/23712?][大數據中異常值檢測的重要性 The Importance of Outlier Detection in Big Data]]
- [[https://zh.wikipedia.org/wiki/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B][異常檢測]]
- [[https://www.itread01.com/content/1546156825.html][異常點檢測演算法分析與選擇]]
- [[https://www.bnext.com.tw/article/67662/ai-emotion][一個門外漢的資料科學學習之]]
- [[https://www.itread01.com/content/1546957458.html][推薦：六款強大的開源資料探勘工具]]
- [[https://www.itread01.com/content/1545266191.html][資料探勘產品 IBM SPSS Modeler 新手使用入門]]
- [[https://franky07724-57962.medium.com/orange-data-mining-%E8%BB%9F%E9%AB%94%E7%B3%BB%E7%B5%B1%E7%B0%A1%E4%BB%8B%E5%8F%8A%E7%94%9F%E9%86%AB%E6%87%89%E7%94%A8%E6%94%AF%E6%8F%B4-%E6%BC%94%E8%AC%9B%E8%B3%87%E6%96%99%E5%8F%8A%E5%BF%83%E5%BE%97%E5%B0%8F%E7%B5%90-3a2d3d5f21d3][Orange Data Mining 軟體系統簡介及生醫應用支援 (演講資料及心得小結)]]
- [[https://blog.pulipuli.info/2019/10/weka-practice-data-mining-with-weka.html][Weka簡介與實作：資料探勘的分群、異常偵測、關聯規則探勘、分類 ]]
- [[https://blog.pulipuli.info/2016/12/wekak-meanssimplekmeans-clustering-with.html][Weka的K Means分群演算法使用教學：SimpleKMeans / Clustering with Weka: SimpleKMeans ]]
- [[https://ithelp.ithome.com.tw/articles/10187371][資料探勘演算法 - 分類法 ]]
- [[https://itw01.com/GZP8EWB.html][分析大資料最需要的Top 10資料探勘工具]]
- [[https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/463552/][幾款開源的資料探勘工具]]
- [[https://www.itread01.com/content/1549712347.html][五款開源的資料探勘軟體]]
- [[https://www.trendmicro.com/zh_tw/what-is/machine-learning/data-mining.html][何謂資料探勘]]
- [[https://www.itread01.com/content/1546957458.html][推薦：六款強大的開源資料探勘工具]]
- [[https://www.daytime.cool/tech/4278345.html][常見的21種資料探勘工具]]
- [[https://www.gushiciku.cn/pl/27QL/zh-tw][19款超好用的免費資料探勘工具大彙總！ ]]
- [[https://itw01.com/YCHB2EM.html][你，值得擁有的那些資料探勘工具]]
- [[https://kknews.cc/zh-tw/tech/en6n8vn.html][分析大數據最需要的Top 10數據挖掘工具]]
- [[https://www.ecloudture.com/amazon-personalize/][Amazon Personalize 利用機器學習建立個人化推薦系統]]
- [[https://awoo.ai/zh-hant/blog/recommender/][揭開『猜你喜歡』的秘密，推薦系統如何向客戶建議商品？]]
- [[https://transbiz.com.tw/amazon-big-data/][在你下單前就出貨！Amazon用大數據鞏固電商龍頭]]
- [[http://archive.ics.uci.edu/ml/datasets.php][UCI Machine Learning Repository]]
* 測驗
- [[https://ctld.nuk.edu.tw/p/405-1007-4836,c847.php?Lang=zh-tw][資訊能力檢定題庫]]
* Footnotes

[fn:3][[https://pansci.asia/archives/194219][現代電腦從此展開——馮紐曼與馮紐曼架構 │《電腦簡史》數位時代（十一）]]
[fn:2][[https://books.google.com.tw/books?id=nDWPW9uwZPAC&pg=PA159&lpg=PA159&dq=%22Constant+Transmitter%22+neon&source=bl&ots=Z2Ilfl9Xws&sig=ACfU3U1P59JekYYr9i_YIpsAhnwQfiVWWA&hl=zh-TW&sa=X&ved=2ahUKEwj3geaN3NX0AhV8xYsBHWaeDmEQ6AF6BAgCEAM#v=onepage&q=%22Constant%20Transmitter%22%20neon&f=false][The First Computers: History and Architectures]]
[fn:1][[https://digital.hagley.org/1985261_001_001_023][ENIAC printer, the constant transmitter, and associated IBM equipment]]
